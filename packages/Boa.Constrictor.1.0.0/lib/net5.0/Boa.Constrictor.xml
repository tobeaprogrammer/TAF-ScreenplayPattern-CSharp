<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Boa.Constrictor</name>
    </assembly>
    <members>
        <member name="T:Boa.Constrictor.Dumping.ByteDumper">
            <summary>
            Dumps byte data to a file in a dump directory.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Dumping.ByteDumper.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">A descriptive name for the dumper.</param>
            <param name="dumpDir">The output directory for dumping requests and responses.</param>
            <param name="fileToken">The token for the file name.</param>
        </member>
        <member name="M:Boa.Constrictor.Dumping.ByteDumper.Dump(System.Byte[],System.String)">
            <summary>
            Writes the dump file to the dump directory using the given data.
            Returns the dumped file's path.
            </summary>
            <param name="data">The byte data.</param>
            <param name="extension">The file extension. (blank by default)</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Dumping.JsonDumper">
            <summary>
            Dumps JSON data to a file in a dump directory.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Dumping.JsonDumper.JsonExtension">
            <summary>
            The JSON file extension.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Dumping.JsonDumper.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">A descriptive name for the dumper.</param>
            <param name="dumpDir">The output directory for dumping requests and responses.</param>
            <param name="fileToken">The token for the file name.</param>
        </member>
        <member name="M:Boa.Constrictor.Dumping.JsonDumper.Dump(System.Object)">
            <summary>
            Writes the JSON dump file to the dump directory using the given data.
            Returns the dumped file's path.
            </summary>
            <param name="jsonData">The JSON data object.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Dumping.TestLogReportDumper">
            <summary>
            Dumps an HTML report that combines all test logs.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Dumping.TestLogReportDumper.DefaultTitle">
            <summary>
            The default title for the report.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Dumping.TestLogReportDumper.HtmlExtension">
            <summary>
            The HTML file extension.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Dumping.TestLogReportDumper.Title">
            <summary>
            The report title.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Dumping.TestLogReportDumper.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">A descriptive name for the dumper.</param>
            <param name="dumpDir">The output directory for dumping requests and responses.</param>
            <param name="fileToken">The token for the file name.</param>
            <param name="title">The report title.</param>
        </member>
        <member name="M:Boa.Constrictor.Dumping.TestLogReportDumper.GetBackgroundColor(System.String)">
            <summary>
            Gets CSS text for a result's background color.
            String format: "background-color: #xxxxxx;".
            Returns an empty string if no color is designated for the result.
            </summary>
            <param name="result">The result string.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Dumping.TestLogReportDumper.ConvertPath(System.String,System.String)">
            <summary>
            Converts a path to an embeddable URI for linking from the HTML report.
            If the absolute path isn't truly absolute, simply return it as a relative URI.
            If no relative path is given, then return the absolute path as a URI.
            If a relative path is given, then return a relative URI for the absolute path.
            </summary>
            <param name="absolute">The absolute file path.</param>
            <param name="relative">The relative directory. May be null or blank.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Dumping.TestLogReportDumper.Dump(System.Collections.Generic.IList{Boa.Constrictor.Logging.TestLogData},System.String,System.Int32)">
            <summary>
            Writes the HTML report using the given TestLogData objects.
            Returns the report file's file path.
            </summary>
            <param name="logs">A list of log data objects.</param>
            <param name="relativePath">If provided, overwrites artifact absolute paths with this relative path.</param>
            <param name="maxScreenshotWidth">Maximum screenshot width in pixels. Defaults to 1500.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Dumping.DumpingException">
            <summary>
            Should be used for any dumping exceptions.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Dumping.DumpingException.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Dumping.DumpingException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Boa.Constrictor.Dumping.DumpingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Boa.Constrictor.Dumping.AbstractDumper">
            <summary>
            Parent class for dumpers.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Dumping.AbstractDumper._DumpDir">
            <summary>
            Private dump directory path used by the DumpDir property.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Dumping.AbstractDumper.DumpDir">
            <summary>
            The output directory for dumped files.
            The directory is created automatically when this property is set.
            Dumping is inactive if this property is null.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Dumping.AbstractDumper.FileToken">
            <summary>
            The token for the file name.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Dumping.AbstractDumper.Name">
            <summary>
            A descriptive name for the dumper.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Dumping.AbstractDumper.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">A descriptive name for the dumper.</param>
            <param name="dumpDir">The output directory for dumped files.</param>
            <param name="fileToken">The token for the file name.</param>
        </member>
        <member name="M:Boa.Constrictor.Dumping.AbstractDumper.GetDumpFilePath(System.String,System.String)">
            <summary>
            Concatenates the dump file path.
            </summary>
            <param name="extension">The file extension. (blank by default)</param>
            <param name="suffix">An optional suffix for the filename.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Dumping.AbstractDumper.ToString">
            <summary>
            Returns the name of the dumper.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Dumping.IDumper">
            <summary>
            A dumping interface for the Screenplay Pattern.
            It provides a way to manage directories for data dumps.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Dumping.IDumper.Name">
            <summary>
            A descriptive name for the dumper.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Dumping.IDumper.DumpDir">
            <summary>
            The output directory for dumped files.
            Dumping is inactive if this property is null.
            </summary>
        </member>
        <member name="T:Boa.Constrictor.Logging.LoggingException">
            <summary>
            Should be used for any Boa Constrictor logging exceptions.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.LoggingException.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.LoggingException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.LoggingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Boa.Constrictor.Logging.ConsoleLogger">
            <summary>
            Prints messages to System.Console.
            Logging uses a class-level lock to avoid half-printed lines because the console is global.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Logging.ConsoleLogger.ConsoleLock">
            <summary>
            Thread synchronization lock object.
            The console is global, so this should be a class-level lock.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.ConsoleLogger.#ctor(Boa.Constrictor.Logging.LogSeverity)">
            <summary>
            Constructor.
            </summary>
            <param name="lowestSeverity">The lowest severity message to log.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.ConsoleLogger.Close">
            <summary>
            Closes the logging stream.
            (No-op for the console.)
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.ConsoleLogger.LogRaw(System.String,Boa.Constrictor.Logging.LogSeverity)">
            <summary>
            Logs a basic message to the console after checking the lowest severity.
            </summary>
            <param name="message">The message text.</param>
            <param name="severity">The severity level (defaults to Info).</param>
        </member>
        <member name="T:Boa.Constrictor.Logging.ListLogger">
            <summary>
            Adds messages to a read-only list of strings.
            (It is useful for unit testing.)
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.ListLogger.#ctor(Boa.Constrictor.Logging.LogSeverity)">
            <summary>
            Basic constructor.
            Initializes the message list to be empty.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.ListLogger.InternalMessages">
            <summary>
            Internal message list.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.ListLogger.Messages">
            <summary>
            Public-facing read-only message list.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.ListLogger.Close">
            <summary>
            Closes the logging stream.
            (No-op for the console.)
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.ListLogger.LogRaw(System.String,Boa.Constrictor.Logging.LogSeverity)">
            <summary>
            Logs a basic message to the list after checking the lowest severity.
            </summary>
            <param name="message">The message text.</param>
            <param name="severity">The severity level (defaults to Info).</param>
        </member>
        <member name="T:Boa.Constrictor.Logging.NoOpLogger">
            <summary>
            Does no logging.
            It is a much safer alternative than using "null" for logger objects.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.NoOpLogger.Close">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.NoOpLogger.LogRaw(System.String,Boa.Constrictor.Logging.LogSeverity)">
            <summary>
            No-op.
            </summary>
            <param name="message">The message text.</param>
            <param name="severity">The severity level (defaults to Info).</param>
        </member>
        <member name="T:Boa.Constrictor.Logging.TeeLogger">
            <summary>
            Sends one message to multiple loggers.
            Any number of loggers may be added.
            TeeLogger does not handle log severity:
            Registered loggers must handle it on their own.
            Loggers must implement ITestLogger.
            TeeLogger must override every log method,
            just in case a registered logger overrode them.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.TeeLogger.#ctor">
            <summary>
            Basic constructor.
            Initializes the collection of inner loggers to be empty.
            The lowest severity is "Trace".
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.TeeLogger.Loggers">
            <summary>
            Collection of inner loggers.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.TeeLogger.Count">
            <summary>
            The number of inner loggers.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.TeeLogger.Add(System.String,Boa.Constrictor.Logging.ILogger)">
            <summary>
            Adds a new logger to be an inner logger.
            Returns a reference to this TeeLogger so calls can be chained.
            </summary>
            <param name="name">The name of the logger.</param>
            <param name="logger">The logger object.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.TeeLogger.Contains(System.String)">
            <summary>
            Checks if this TeeLogger contains an inner logger by name.
            </summary>
            <param name="name">The name of the logger.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Logging.TeeLogger.Get(System.String)">
            <summary>
            Gets an inner logger by name.
            </summary>
            <param name="name">The name of the logger.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Logging.TeeLogger.Remove(System.String)">
            <summary>
            Removes an inner logger by name.
            Returns true if the inner logger was found and removed.
            </summary>
            <param name="name">The name of the logger.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Logging.TeeLogger.Close">
            <summary>
            Closes the logging stream for each inner logger.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.TeeLogger.LogArtifact(System.String,System.String)">
            <summary>
            Logs an artifact for each inner logger.
            The artifact must be saved to a file, like a screenshot image or a JSON dump.
            </summary>
            <param name="type">The name for the type of artifact.</param>
            <param name="path">The file path to the artifact.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.TeeLogger.LogRaw(System.String,Boa.Constrictor.Logging.LogSeverity)">
            <summary>
            Logs a basic message to each inner logger.
            Lowest log severity is not considered.
            </summary>
            <param name="message">The message text.</param>
            <param name="severity">The severity level (defaults to Info).</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.TeeLogger.Trace(System.String)">
            <summary>
            Logs a message with Trace severity to each inner logger.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.TeeLogger.Debug(System.String)">
            <summary>
            Logs a message with Debug severity to each inner logger.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.TeeLogger.Info(System.String)">
            <summary>
            Logs a message with Info severity to each inner logger.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.TeeLogger.Warning(System.String)">
            <summary>
            Logs a message with Warning severity to each inner logger.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.TeeLogger.Error(System.String)">
            <summary>
            Logs a message with Error severity to each inner logger.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.TeeLogger.Fatal(System.String)">
            <summary>
            Logs a message with Fatal severity to each inner logger.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="T:Boa.Constrictor.Logging.TestLogger">
            <summary>
            Logs messages to a JSON log file for one test case.
            Breaks test case logging into steps.
            Uses TestCaseData and StepArtifactData for JSON serialization.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.TestLogger.TestLogDir">
            <summary>
            The test log directory where to dump the JSON file upon closing the logger.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.TestLogger.TestLogPath">
            <summary>
            The test log path where the JSON file is dumped.
            This value will be null until the file is dumped upon closing the logger.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.TestLogger.Data">
            <summary>
            The test case data being logged.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.TestLogger.CurrentStep">
            <summary>
            The current step data object.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.TestLogger.#ctor(System.String,System.String,Boa.Constrictor.Logging.LogSeverity)">
            <summary>
            Constructor.
            </summary>
            <param name="testName">The test case name.</param>
            <param name="testLogDir">The test log directory where to dump the JSON file upon closing the logger.</param>
            <param name="lowestSeverity">The lowest severity message to log.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.TestLogger.Close">
            <summary>
            Closes the logger and writes the test log as a JSON file.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.TestLogger.LogArtifact(System.String,System.String)">
            <summary>
            Logs an artifact.
            The artifact must be saved to a file, like a screenshot image or a JSON dump.
            </summary>
            <param name="type">The name for the type of artifact.</param>
            <param name="path">The file path to the artifact.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.TestLogger.LogRaw(System.String,Boa.Constrictor.Logging.LogSeverity)">
            <summary>
            Logs a raw message.
            </summary>
            <param name="message">The message.</param>
            <param name="severity">The log severity.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.TestLogger.LogResult(System.String)">
            <summary>
            Logs the test result.
            </summary>
            <param name="result">The test result.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.TestLogger.LogStep(System.String)">
            <summary>
            Logs a new step.
            Internally adds new step data.
            All messages and artifacts will be logged under this new step.
            </summary>
            <param name="name">The test step name.</param>
        </member>
        <member name="T:Boa.Constrictor.Logging.LogSeverity">
            <summary>
            Enum for log severity levels.
            The higher the value, the more severe the level.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Logging.LogSeverity.Trace">
            <summary>
            Trace level.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Logging.LogSeverity.Debug">
            <summary>
            Debug level.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Logging.LogSeverity.Info">
            <summary>
            Info level.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Logging.LogSeverity.Warning">
            <summary>
            Warning level.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Logging.LogSeverity.Error">
            <summary>
            Error level.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Logging.LogSeverity.Fatal">
            <summary>
            Fatal level.
            </summary>
        </member>
        <member name="T:Boa.Constrictor.Logging.MessageFormat">
            <summary>
            Provides static methods for formatting log messages.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.MessageFormat.StandardTimestamp(System.String,System.String)">
            <summary>
            Formats a message with a timestamp and severity level prefix.
            </summary>
            <param name="message">The message text.</param>
            <param name="severity">The severity level as a string.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Logging.MessageFormat.StandardTimestamp(System.String,Boa.Constrictor.Logging.LogSeverity)">
            <summary>
            Formats a message with a timestamp and severity level prefix.
            </summary>
            <param name="message">The message text.</param>
            <param name="severity">The log severity level.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Logging.ArtifactTypes">
            <summary>
            Provides string constants for logging artifacts.
            Strings are used instead of enumerations so that loggers can technically log any type of artifact.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Logging.ArtifactTypes.Downloads">
            <summary>
            Artifact type for downloaded files.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Logging.ArtifactTypes.Requests">
            <summary>
            Artifact type for request data dump files.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Logging.ArtifactTypes.Screenshots">
            <summary>
            Artifact type for screenshot images.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Logging.ArtifactTypes.TestLogReports">
            <summary>
            Artifact type for test log reports.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Logging.ArtifactTypes.TestLogs">
            <summary>
            Artifact type for test logs.
            </summary>
        </member>
        <member name="T:Boa.Constrictor.Logging.StepArtifactData">
            <summary>
            Models data for one test step.
            Can be used directly for JSON serialization.
            Used by TestLogger.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.StepArtifactData.Name">
            <summary>
            The name of the test step.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.StepArtifactData.Messages">
            <summary>
            Log messages for the test step.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.StepArtifactData.Artifacts">
            <summary>
            Artifacts for the steps.
            Each artifact has a type (which is the key name) and a path (which should be a list entry).
            Strings are used so that callers can use any artifact type for a key.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.StepArtifactData.#ctor">
            <summary>
            Default constructor.
            Initializes the step name to be blank.
            Initializes all artifact lists to be empty.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.StepArtifactData.#ctor(System.String)">
            <summary>
            Constructor.
            Initializes all artifact lists to be empty.
            </summary>
            <param name="name">The name of the test step.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.StepArtifactData.AddArtifact(System.String,System.String)">
            <summary>
            Adds an artifact to this step data.
            Artifacts are files, like screenshot images or JSON data dumps.
            </summary>
            <param name="type">The type of artifact to add.</param>
            <param name="path">The file path to the artifact.</param>
        </member>
        <member name="T:Boa.Constrictor.Logging.TestLogData">
            <summary>
            Models data for one test case.
            Can be used directly for JSON serialization.
            Used by TestLogger.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.TestLogData.Name">
            <summary>
            The test name.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.TestLogData.Result">
            <summary>
            The test result.
            This is a string value so that it may be free form.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.TestLogData.Steps">
            <summary>
            The test steps.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.TestLogData.#ctor">
            <summary>
            Default constructor.
            Initializes the test name to be blank.
            Initializes the list of steps to be empty.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.TestLogData.#ctor(System.String)">
            <summary>
            Constructor.
            Initializes the list of steps to be empty.
            </summary>
            <param name="name">The test name.</param>
        </member>
        <member name="T:Boa.Constrictor.Logging.AbstractLogger">
            <summary>
            An abstract implementation of ILogger.
            The log-by-level methods can all use the basic Log method directly.
            However, the main Log methods must be implemented by a concrete subclass.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.AbstractLogger.#ctor(Boa.Constrictor.Logging.LogSeverity)">
            <summary>
            Constructor.
            </summary>
            <param name="lowestSeverity">The lowest severity message to log.</param>
        </member>
        <member name="P:Boa.Constrictor.Logging.AbstractLogger.LowestSeverity">
            <summary>
            The lowest severity message to log.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.AbstractLogger.Close">
            <summary>
            Closes the logging stream.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.AbstractLogger.LogRaw(System.String,Boa.Constrictor.Logging.LogSeverity)">
            <summary>
            Logs a basic message after checking the lowest severity.
            </summary>
            <param name="message">The message text.</param>
            <param name="severity">The severity level (defaults to Info).</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.AbstractLogger.Log(System.String,Boa.Constrictor.Logging.LogSeverity)">
            <summary>
            Logs a basic message if the severity is greater than the lowest severity.
            </summary>
            <param name="message">The message text.</param>
            <param name="severity">The severity level (defaults to Info).</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.AbstractLogger.LogArtifact(System.String,System.String)">
            <summary>
            Logs an artifact.
            The artifact must be saved to a file, like a screenshot image or a JSON dump.
            </summary>
            <param name="type">The name for the type of artifact.</param>
            <param name="path">The file path to the artifact.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.AbstractLogger.Trace(System.String)">
            <summary>
            Logs a message with Trace severity.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.AbstractLogger.Debug(System.String)">
            <summary>
            Logs a message with Debug severity.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.AbstractLogger.Info(System.String)">
            <summary>
            Logs a message with Info severity.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.AbstractLogger.Warning(System.String)">
            <summary>
            Logs a message with Warning severity.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.AbstractLogger.Error(System.String)">
            <summary>
            Logs a message with Error severity.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.AbstractLogger.Fatal(System.String)">
            <summary>
            Logs a message with Fatal severity.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="T:Boa.Constrictor.Logging.ILogger">
            <summary>
            A logging interface for the Screenplay Pattern.
            It provides abstraction for generic logging.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Logging.ILogger.LowestSeverity">
            <summary>
            The lowest severity message to log.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.ILogger.Close">
            <summary>
            Closes the logging stream.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Logging.ILogger.Log(System.String,Boa.Constrictor.Logging.LogSeverity)">
            <summary>
            Logs a basic message.
            </summary>
            <param name="message">The message text.</param>
            <param name="severity">The severity level (defaults to Info).</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.ILogger.LogArtifact(System.String,System.String)">
            <summary>
            Logs an artifact.
            The artifact must be saved to a file, like a screenshot image or a JSON dump.
            </summary>
            <param name="type">The name for the type of artifact.</param>
            <param name="path">The file path to the artifact.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.ILogger.Trace(System.String)">
            <summary>
            Logs a message with Trace severity.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.ILogger.Debug(System.String)">
            <summary>
            Logs a message with Debug severity.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.ILogger.Info(System.String)">
            <summary>
            Logs a message with Info severity.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.ILogger.Warning(System.String)">
            <summary>
            Logs a message with Warning severity.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.ILogger.Error(System.String)">
            <summary>
            Logs a message with Error severity.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Boa.Constrictor.Logging.ILogger.Fatal(System.String)">
            <summary>
            Logs a message with Fatal severity.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.AbstractRestSharpAbility">
            <summary>
            Abstract parent class for abilities that enable the actor to make REST API calls using RestSharp.
            It constructs and holds one RestSharp client for the given base URL.
            This ability also holds dumpers for requests/responses and downloaded files.
            If dumpers are null, then no dumping is performed.
            This ability also handles adding and retrieving cookies.
            
            To use more than one RestSharp client, create subclasses of this abstract class,
            or implement the IRestSharpAbility interface.
            Do not make subclasses of CallRestApi, or else static builders will break.
            The subclass will bear a unique type.
            Then, the Actor can use that subclass as a new type of ability for lookup.
            RestSharp interactions without type generics use the CallRestApi ability,
            while interactions with type generics will use the given ability by type.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.AbstractRestSharpAbility.#ctor(RestSharp.IRestClient)">
            <summary>
            Protected constructor.
            (Use static methods in a subclass for public construction.)
            </summary>
            <param name="client">The RestSharp client.</param>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.AbstractRestSharpAbility.#ctor(System.String)">
            <summary>
            Protected constructor.
            (Use static methods in a subclass for public construction.)
            </summary>
            <param name="baseUrl">The base URL for the RestSharp client.</param>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.AbstractRestSharpAbility.Client">
            <summary>
            The RestSharp client.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.AbstractRestSharpAbility.DownloadDumper">
            <summary>
            The dumper for downloaded files.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.AbstractRestSharpAbility.RequestDumper">
            <summary>
            The dumper for requests and responses.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.AbstractRestSharpAbility.LastRequest">
            <summary>
            The last request object dumped.
            Warning: it might be null.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.AbstractRestSharpAbility.LastResponse">
            <summary>
            The last response object dumped.
            Warning: it might be null.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.AbstractRestSharpAbility.AddCookie(System.Net.Cookie)">
            <summary>
            Adds a cookie to the RestSharp client.
            </summary>
            <param name="cookie">The cookie to add to the RestSharp client.</param>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.AbstractRestSharpAbility.CanDumpDownloads">
            <summary>
            Checks if downloads can be dumped.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.AbstractRestSharpAbility.CanDumpRequests">
            <summary>
            Checks if requests and responses can be dumped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.AbstractRestSharpAbility.GetCookie(System.String)">
            <summary>
            Gets a cookie from the RestSharp client by name.
            If the cookie does not exist, then this method returns null.
            </summary>
            <param name="name">The cookie name.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.AbstractRestSharpAbility.ToString">
            <summary>
            Returns a description of this ability.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.CallRestApi">
            <summary>
            The "default" RestSharp ability.
            Enables the actor to make REST API calls using RestSharp.
            It constructs and holds one RestSharp client for the given base URL.
            This ability also holds dumpers for requests/responses and downloaded files.
            If dumpers are null, then no dumping is performed.
            This ability also handles adding and retrieving cookies.
            
            To use more than one RestSharp client, create subclasses of AbstractRestSharpAbility,
            or implement the IRestSharpAbility interface.
            Do not make subclasses of CallRestApi, or else static builders will break.
            The subclass will bear a unique type.
            Then, the Actor can use that subclass as a new type of ability for lookup.
            RestSharp interactions without type generics use the CallRestApi ability,
            while interactions with type generics will use the given ability by type.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.CallRestApi.#ctor(RestSharp.IRestClient)">
            <summary>
            Protected constructor.
            (Use static builder methods for public construction.)
            </summary>
            <param name="client">The RestSharp client.</param>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.CallRestApi.#ctor(System.String)">
            <summary>
            Protected constructor.
            (Use static builder methods for public construction.)
            </summary>
            <param name="baseUrl">The base URL for the RestSharp client.</param>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.CallRestApi.At(System.String)">
            <summary>
            Constructs this ability.
            </summary>
            <param name="baseUrl">The base URL for the RestSharp client.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.CallRestApi.Using(RestSharp.IRestClient)">
            <summary>
            Constructs this ability.
            </summary>
            <param name="client">The RestSharp client.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.CallRestApi.DumpingRequestsTo(System.String,System.String)">
            <summary>
            Sets the ability to dump requests/responses to the given path.
            </summary>
            <param name="dumpDir">The dump directory path.</param>
            <param name="fileToken">The file token.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.CallRestApi.DumpingDownloadsTo(System.String,System.String)">
            <summary>
            Sets the ability to dump requests/responses to the given path.
            </summary>
            <param name="dumpDir">The dump directory path.</param>
            <param name="fileToken">The file token.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.IRestSharpAbility">
            <summary>
            Enables the actor to make REST API calls using RestSharp.
            It holds one RestSharp client for the given base URL.
            This ability also holds dumpers for requests/responses and downloaded files.
            If dumpers are null, then no dumping is performed.
            This ability also handles adding and retrieving cookies.
            
            To use more than one RestSharp client, create classes that implement this interface.
            Then, the Actor can use that class as a new type of ability for lookup.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.IRestSharpAbility.Client">
            <summary>
            The RestSharp client.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.IRestSharpAbility.DownloadDumper">
            <summary>
            The dumper for downloaded files.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.IRestSharpAbility.RequestDumper">
            <summary>
            The dumper for requests and responses.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.IRestSharpAbility.LastRequest">
            <summary>
            The last request object dumped.
            Warning: it might be null.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.IRestSharpAbility.LastResponse">
            <summary>
            The last response object dumped.
            Warning: it might be null.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.IRestSharpAbility.AddCookie(System.Net.Cookie)">
            <summary>
            Adds a cookie to the RestSharp client.
            </summary>
            <param name="cookie">The cookie to add to the RestSharp client.</param>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.IRestSharpAbility.CanDumpDownloads">
            <summary>
            Checks if downloads can be dumped.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.IRestSharpAbility.CanDumpRequests">
            <summary>
            Checks if requests and responses can be dumped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.IRestSharpAbility.GetCookie(System.String)">
            <summary>
            Gets a cookie from the RestSharp client by name.
            If the cookie does not exist, then this method returns null.
            </summary>
            <param name="name">The cookie name.</param>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.RequestDumper">
            <summary>
            Dumps RestSharp requests and responses.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.RequestDumper.LastRequest">
            <summary>
            The last request object dumped.
            Warning: it might be null.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.RequestDumper.LastResponse">
            <summary>
            The last response object dumped.
            Warning: it might be null.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RequestDumper.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">A descriptive name for the dumper.</param>
            <param name="dumpDir">The output directory for dumping requests and responses.</param>
            <param name="fileToken">The token for the file name.</param>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RequestDumper.Dump(RestSharp.IRestClient,RestSharp.IRestRequest,RestSharp.IRestResponse,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Writes the JSON dump file to the dump directory for the request and the response.
            Returns the dumped file's path.
            </summary>
            <param name="client">RestSharp client.</param>
            <param name="request">Request object.</param>
            <param name="response">Response object.</param>
            <param name="start">Request's start time.</param>
            <param name="end">Request's end time.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.RestApiDownloadException">
            <summary>
            Should be used for any Screenplay REST API file download exceptions.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RestApiDownloadException.#ctor(RestSharp.IRestRequest,RestSharp.IRestResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="request">The request object.</param>
            <param name="response">The response object.</param>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.RestApiDownloadException.Request">
            <summary>
            The request object.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.RestApiDownloadException.Response">
            <summary>
            The response object.
            </summary>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.RestApiException">
            <summary>
            Should be used for any Screenplay REST API exceptions.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RestApiException.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RestApiException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RestApiException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.AbstractRestQuestion`2">
            <summary>
            Abstract parent class for RestSharp Questions.
            Provides protected methods for calling requests and downloads.
            </summary>
            <typeparam name="TAbility">The RestSharp Ability type.</typeparam>
            <typeparam name="TAnswer">The answer type for the question.</typeparam>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.AbstractRestQuestion`2.Request">
            <summary>
            The REST request to call.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.AbstractRestQuestion`2.#ctor(RestSharp.IRestRequest)">
            <summary>
            Protected constructor.
            </summary>
            <param name="request">The REST request to call.</param>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.AbstractRestQuestion`2.Execute(RestSharp.IRestClient)">
            <summary>
            Executes the request using the given client.
            </summary>
            <param name="client">The RestSharp client.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.AbstractRestQuestion`2.RequestAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Calls the question.
            </summary>
            <param name="actor">The Screenplay actor.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.AbstractRestQuestion`2.CallDownload(Boa.Constrictor.Screenplay.IActor,System.String)">
            <summary>
            Calls the REST request and returns the downloaded file byte array.
            Throws a RestApiDownloadException if the request's response code is a client or server error or response status is a transport error.
            </summary>
            <param name="actor">The Screenplay actor.</param>
            <param name="fileExtension">The extension for the file to download.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.AbstractRestQuestion`2.CallRequest(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Calls the REST request and returns the response.
            </summary>
            <param name="actor">The Screenplay actor.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.AbstractRestQuestion`2.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.Rest">
            <summary>
            Provides fluent builder methods for RestSharp interactions that use the default RestSharp ability.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.Rest.Download(RestSharp.IRestRequest,System.String)">
            <summary>
            Builder method for RestApiDownload that uses the CallRestApi Ability.
            Recommended usage: `Actor.Calls`.
            </summary>
            <param name="request">The REST request to call.</param>
            <param name="fileExtension">The extension for the file to download.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.Rest.Request(RestSharp.IRestRequest)">
            <summary>
            Builder method for RestApiCall that uses the CallRestApi Ability and does not deserialize the response.
            Recommended usage: `Actor.Calls`.
            </summary>
            <param name="request">The REST request to call.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.Rest.Request``1(RestSharp.IRestRequest)">
            <summary>
            Builder method for RestApiCall that uses the CallRestApi Ability and deserializes the response.
            Recommended usage: `Actor.Calls`.
            </summary>
            <param name="request">The REST request to call.</param>
            <typeparam name="TData">The response data type for deserialization.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.Rest`1">
            <summary>
            Provides fluent builder methods for RestSharp interactions that use type-specific RestSharp abilities.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.Rest`1.Download(RestSharp.IRestRequest,System.String)">
            <summary>
            Builder method for RestApiDownload that uses a generic IRestSharpAbility Ability.
            Recommended usage: `Actor.Calls`.
            </summary>
            <param name="request">The REST request to call.</param>
            <param name="fileExtension">The extension for the file to download.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.Rest`1.Request(RestSharp.IRestRequest)">
            <summary>
            Builder method for RestApiCall that uses a generic IRestSharpAbility Ability and does not deserialize the response.
            Recommended usage: `Actor.Calls`.
            </summary>
            <param name="request">The REST request to call.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.Rest`1.Request``1(RestSharp.IRestRequest)">
            <summary>
            Builder method for RestApiCall that uses a generic IRestSharpAbility Ability and deserializes the response.
            Recommended usage: `Actor.Calls`.
            </summary>
            <param name="request">The REST request to call.</param>
            <typeparam name="TData">The response data type for deserialization.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.RestApiCall`1">
            <summary>
            Calls the REST API given by the request spec and returns the response.
            The response is NOT parsed using a serializable object.
            Requires the applicable IRestSharpAbility ability.
            Automatically dumps requests and responses if the ability has a dumper.
            </summary>
            <typeparam name="TAbility">The RestSharp ability type.</typeparam>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RestApiCall`1.#ctor(RestSharp.IRestRequest)">
            <summary>
            Internal constructor.
            (Use the Rest class to construct the question.)
            </summary>
            <param name="request">The REST request to call.</param>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RestApiCall`1.Execute(RestSharp.IRestClient)">
            <summary>
            Executes the request using the given client.
            </summary>
            <param name="client">The RestSharp client.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RestApiCall`1.RequestAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Calls the REST request and returns the response.
            </summary>
            <param name="actor">The Screenplay actor.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.RestApiCall`2">
            <summary>
            Calls the REST API given by the request spec and returns the response.
            The response is parsed using the given data type.
            Requires the applicable IRestSharpAbility ability.
            Automatically dumps requests and responses if the ability has a dumper.
            </summary>
            <typeparam name="TAbility">The RestSharp ability type.</typeparam>
            <typeparam name="TData">The data deserialization object type.</typeparam>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RestApiCall`2.#ctor(RestSharp.IRestRequest)">
            <summary>
            Internal constructor.
            (Use the Rest class to construct the question.)
            </summary>
            <param name="request">The REST request to call.</param>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RestApiCall`2.Execute(RestSharp.IRestClient)">
            <summary>
            Executes the request using the given client.
            </summary>
            <param name="client">The RestSharp client.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RestApiCall`2.RequestAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Calls the REST request and returns the response with deserialized data.
            </summary>
            <param name="actor">The Screenplay actor.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.RestApiDownload`1">
            <summary>
            Calls the REST API given by the request and returns the array of bytes that make up the file data in the response.
            Requires the applicable IRestSharpAbility ability.
            Automatically dumps the downloaded file if the ability has a dumper.
            </summary>
            <typeparam name="TAbility">The RestSharp Ability type.</typeparam>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.RestApiDownload`1.FileExtension">
            <summary>
            The extension for the file to download.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RestApiDownload`1.#ctor(RestSharp.IRestRequest,System.String)">
            <summary>
            Internal constructor.
            (Use the Rest class to construct the question.)
            </summary>
            <param name="request">The REST request to call.</param>
            <param name="fileExtension">The extension for the file to download.</param>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RestApiDownload`1.Execute(RestSharp.IRestClient)">
            <summary>
            Executes the request using the given client.
            </summary>
            <param name="client">The RestSharp client.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RestApiDownload`1.RequestAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Calls the REST request and returns the downloaded file data as a byte array.
            Throws a RestApiDownloadException if the request's response code is a client or server error or response status is a transport error.
            </summary>
            <param name="actor">The Screenplay actor.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RestApiDownload`1.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.DurationData">
            <summary>
            Serialization class for duration.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.DurationData.StartTime">
            <summary>
            The start time.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.DurationData.EndTime">
            <summary>
            The end time.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.DurationData.Duration">
            <summary>
            The duration time, which is end time minus start time.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.DurationData.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Constructor.
            </summary>
            <param name="start">The start time.</param>
            <param name="end">The end time.</param>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.FullRestData">
            <summary>
            Serialization class for all data.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.FullRestData.Duration">
            <summary>
            Duration time data.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.FullRestData.Request">
            <summary>
            Request data.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.FullRestData.Response">
            <summary>
            Response data.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.FullRestData.Cookies">
            <summary>
            Request cookies.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.FullRestData.#ctor(RestSharp.IRestClient,RestSharp.IRestRequest,RestSharp.IRestResponse,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Constructor.
            </summary>
            <param name="client">RestSharp client.</param>
            <param name="request">Request object.</param>
            <param name="response">Response object.</param>
            <param name="start">Request's start time.</param>
            <param name="end">Request's end time.</param>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.FullRestData.GetCookieData(RestSharp.IRestClient)">
            <summary>
            Converts the REST client cookies to a serializable object.
            </summary>
            <param name="client">RestSharp client.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.ParameterData">
            <summary>
            Serialization class for parameters.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.ParameterData.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.ParameterData.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.ParameterData.Type">
            <summary>
            Type.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.ParameterData.GetParameterDataList(System.Collections.Generic.IList{RestSharp.Parameter})">
            <summary>
            Converts a list of parameters to a serializable object.
            </summary>
            <param name="parameters">The list of parameters.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.RequestData">
            <summary>
            Serialization class for request.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.RequestData.Method">
            <summary>
            Request method.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.RequestData.Uri">
            <summary>
            Request URI.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.RequestData.Resource">
            <summary>
            Request resource path.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.RequestData.Parameters">
            <summary>
            Request parameters.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.RequestData.Body">
            <summary>
            Request body.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RequestData.#ctor(RestSharp.IRestRequest)">
            <summary>
            Constructor.
            </summary>
            <param name="request">Request object.</param>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.RequestData.#ctor(RestSharp.IRestRequest,RestSharp.IRestClient)">
            <summary>
            Constructor.
            </summary>
            <param name="client">RestSharp client.</param>
            <param name="request">Request object.</param>
        </member>
        <member name="T:Boa.Constrictor.RestSharp.ResponseData">
            <summary>
            Serialization class for response.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.ResponseData.Uri">
            <summary>
            Response URI.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.ResponseData.StatusCode">
            <summary>
            Response HTTP status code.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.ResponseData.ErrorMessage">
            <summary>
            Response error message.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.ResponseData.Content">
            <summary>
            Response content.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.RestSharp.ResponseData.Headers">
            <summary>
            Response headers.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.RestSharp.ResponseData.#ctor(RestSharp.IRestResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="response">Response object.</param>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.AnswerCache">
            <summary>
            Caches answers to Questions.
            Questions must implement `ICacheableQuestion` to be compatible with caching.
            WARNING: Do NOT cache answers to every Question.
            Only cache answers that you know will be fairly constant.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Screenplay.AnswerCache.Lock">
            <summary>
            Lock object for safe multi-threading.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.AnswerCache.Cache">
            <summary>
            The answer cache.
            Maps Question objects to answer objects.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.AnswerCache.#ctor">
            <summary>
            Default constructor.
            Initializes the cache to be empty.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.AnswerCache.Get``1(Boa.Constrictor.Screenplay.ICacheableQuestion{``0},Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Gets an answer from the cache.
            If the cache does not have the answer, it asks the Question using the given Actor.
            Uses the lock to be thread-safe.
            </summary>
            <typeparam name="TAnswer">The answer type.</typeparam>
            <param name="question">The Question.</param>
            <param name="actor">The Actor.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.AnswerCache.Has``1(Boa.Constrictor.Screenplay.ICacheableQuestion{``0})">
            <summary>
            Checks if the cache contains an answer for the given Question.
            Uses the lock to be thread-safe.
            </summary>
            <typeparam name="TAnswer">The answer type.</typeparam>
            <param name="question">The Question.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.AnswerCache.Invalidate``1(Boa.Constrictor.Screenplay.ICacheableQuestion{``0})">
            <summary>
            Invalidates a cached answer for a Question by removing it from the cache.
            Uses the lock to be thread-safe.
            </summary>
            <typeparam name="TAnswer">The answer type.</typeparam>
            <param name="question">The Question.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.AnswerCache.InvalidateAll">
            <summary>
            Invalidates all answers in the cache by clearing it completely.
            Uses the lock to be thread-safe.
            </summary>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.CacheAnswers">
            <summary>
            Enables the Actor to cache answers to Questions.
            Any Question may be cached as long as it implements the Equals and GetHashCode methods.
            WARNING: Do NOT cache answers to every Question.
            Only cache answers that you know will be fairly constant.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.CacheAnswers.Cache">
            <summary>
            The answer cache.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.CacheAnswers.#ctor(Boa.Constrictor.Screenplay.AnswerCache)">
            <summary>
            Private constructor.
            </summary>
            <param name="cache">The answer cache.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.CacheAnswers.With(Boa.Constrictor.Screenplay.AnswerCache)">
            <summary>
            Builder method for this ability.
            </summary>
            <param name="cache">The answer cache.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.CachedAnswer`1">
            <summary>
            Question to get an answer from the answer cache.
            If the answer is cached, this returns that value.
            If the answer is not cached, this calls the question, caches the answer, and returns the value.
            Questions to cache must implement `ICacheableQuestion`.
            WARNING: Do NOT cache answers to every Question.
            Only cache answers that you know will be fairly constant.
            </summary>
            <typeparam name="TAnswer"></typeparam>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.CachedAnswer`1.Question">
            <summary>
            The target Question.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.CachedAnswer`1.#ctor(Boa.Constrictor.Screenplay.ICacheableQuestion{`0})">
            <summary>
            Private constructor.
            </summary>
            <param name="question">The target Question.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.CachedAnswer`1.For(Boa.Constrictor.Screenplay.ICacheableQuestion{`0})">
            <summary>
            Builder method.
            </summary>
            <param name="question">The target Question.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.CachedAnswer`1.RequestAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Gets the answer to the question through the cache.
            If the answer is cached, this returns that value.
            If the answer is not cached, this calls the question, caches the answer, and returns the value.
            </summary>
            <param name="actor">The Actor.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.CachingExtensions">
            <summary>
            Extension methods for caching answers.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.CachingExtensions.GetsCached``1(Boa.Constrictor.Screenplay.IActor,Boa.Constrictor.Screenplay.ICacheableQuestion{``0})">
            <summary>
            A simplified extension method for caching answers.
            Calls will look like `Actor.GetsCached(...)` instead of `Actor.AsksFor(CachedAnswer.For(...))`.
            WARNING: Do NOT cache answers to every Question.
            Only cache answers that you know will be fairly constant.
            Use this extension method only when explicitly caching answers.
            </summary>
            <typeparam name="TAnswer">The answer type.</typeparam>
            <param name="actor">The Actor.</param>
            <param name="question">The Question.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.CachingExtensions.Discovers``1(Boa.Constrictor.Screenplay.IActor,Boa.Constrictor.Screenplay.ICacheableQuestion{``0})">
            <summary>
            A simplified extension method for caching answers.
            Calls will look like `Actor.Discovers(...)` instead of `Actor.AsksFor(CachedAnswer.For(...))`.
            WARNING: Do NOT cache answers to every Question.
            Only cache answers that you know will be fairly constant.
            Use this extension method only when explicitly caching answers.
            </summary>
            <typeparam name="TAnswer">The answer type.</typeparam>
            <param name="actor">The Actor.</param>
            <param name="question">The Question.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.ICacheableQuestion`1">
            <summary>
            Makes a Question compatible with caching answers.
            WARNING: Do NOT cache answers to every Question.
            Only cache answers that you know will be fairly constant.
            </summary>
            <typeparam name="TAnswer"></typeparam>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ICacheableQuestion`1.Equals(System.Object)">
            <summary>
            Checks if this Question is equal to another Question.
            Questions should be "equal" if they are the same type and have the same property values.
            </summary>
            <param name="obj">The other Question object.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ICacheableQuestion`1.GetHashCode">
            <summary>
            Generates a unique hash code for this Question.
            The hash code should depend upon the type and the property values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.AbstractComparison`1">
            <summary>
            Condition superclass for comparisons.
            </summary>
            <typeparam name="TValue">The value type, which must be comparable.</typeparam>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.AbstractComparison`1.#ctor(`0)">
            <summary>
            Private constructor.
            (Use the public builder method instead.)
            </summary>
            <param name="expected">The comparison value.</param>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.AbstractComparison`1.Expected">
            <summary>
            The comparison value.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.AbstractComparison`1.Compare(`0)">
            <summary>
            Checks how the actual value compares to the other value.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.ContainsSubstring">
            <summary>
            Condition for containing a substring.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ContainsSubstring.#ctor(System.String)">
            <summary>
            Private constructor.
            (Use the public builder method instead.)
            </summary>
            <param name="substring">The substring to seek.</param>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.ContainsSubstring.Substring">
            <summary>
            The substring to seek.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ContainsSubstring.Text(System.String)">
            <summary>
            Public builder.
            </summary>
            <param name="substring">The substring to seek.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ContainsSubstring.Evaluate(System.String)">
            <summary>
            Checks if the actual string contains the expected substring.
            </summary>
            <param name="actual">The actual string.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ContainsSubstring.ToString">
            <summary>
            ToString override.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.IsEqualTo`1">
            <summary>
            Condition for equality.
            Uses the Equals method.
            </summary>
            <typeparam name="TValue">The expected value type.</typeparam>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsEqualTo`1.#ctor(`0)">
            <summary>
            Private constructor.
            (Use the public builder method instead.)
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.IsEqualTo`1.Expected">
            <summary>
            The expected value.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsEqualTo`1.Value(`0)">
            <summary>
            Public builder.
            </summary>
            <param name="expected">The expected value.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsEqualTo`1.Evaluate(`0)">
            <summary>
            Checks if the actual value equals the expected value using the "Equals" method.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsEqualTo`1.ToString">
            <summary>
            ToString override.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.IsEqualTo">
            <summary>
            Provides builder methods for IsEqualTo conditions without type generics.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsEqualTo.False">
            <summary>
            Builder method to avoid requiring type generic in the fluent call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsEqualTo.True">
            <summary>
            Builder method to avoid requiring type generic in the fluent call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsEqualTo.Value``1(``0)">
            <summary>
            Builder method to avoid requiring type generic in the fluent call.
            </summary>
            <typeparam name="TValue">The expected value type.</typeparam>
            <param name="expected">The expected value.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.IsNotEqualTo">
            <summary>
            Provides builder methods for adding a logical NOT to IsEqualTo conditions.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsNotEqualTo.Value``1(``0)">
            <summary>
            Builder method to avoid requiring type generic in the fluent call.
            </summary>
            <typeparam name="TValue">The expected value type.</typeparam>
            <param name="expected">The expected value.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.IsGreaterThan`1">
            <summary>
            Condition for comparison.
            </summary>
            <typeparam name="TValue">The value type, which must be comparable.</typeparam>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsGreaterThan`1.#ctor(`0)">
            <summary>
            Private constructor.
            (Use the public builder method instead.)
            </summary>
            <param name="value">The comparison value.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsGreaterThan`1.Value(`0)">
            <summary>
            Public builder.
            </summary>
            <param name="value">The comparison value.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsGreaterThan`1.Evaluate(`0)">
            <summary>
            Compares the actual value to the comparison value.
            </summary>
            <param name="actual">The actual value.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsGreaterThan`1.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.IsGreaterThan">
            <summary>
            Provides builder methods for IsGreaterThan conditions without type generics.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsGreaterThan.Value``1(``0)">
            <summary>
            Builder method to avoid requiring type generic in the fluent call.
            </summary>
            <typeparam name="TValue">The expected value type.</typeparam>
            <param name="expected">The expected value.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.IsLessThanOrEqualTo">
            <summary>
            Provides builder methods for adding a logical NOT to IsGreaterThan conditions.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsLessThanOrEqualTo.Value``1(``0)">
            <summary>
            Builder method to avoid requiring type generic in the fluent call.
            </summary>
            <typeparam name="TValue">The expected value type.</typeparam>
            <param name="expected">The expected value.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.IsLessThan`1">
            <summary>
            Condition for comparison.
            </summary>
            <typeparam name="TValue">The value type, which must be comparable.</typeparam>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsLessThan`1.#ctor(`0)">
            <summary>
            Private constructor.
            (Use the public builder method instead.)
            </summary>
            <param name="value">The comparison value.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsLessThan`1.Value(`0)">
            <summary>
            Public builder.
            </summary>
            <param name="value">The comparison value.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsLessThan`1.Evaluate(`0)">
            <summary>
            Compares the actual value to the comparison value.
            </summary>
            <param name="actual">The actual value.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsLessThan`1.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.IsLessThan">
            <summary>
            Provides builder methods for IsLessThan conditions without type generics.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsLessThan.Value``1(``0)">
            <summary>
            Builder method to avoid requiring type generic in the fluent call.
            </summary>
            <typeparam name="TValue">The expected value type.</typeparam>
            <param name="expected">The expected value.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.IsGreaterThanOrEqualTo">
            <summary>
            Provides builder methods for adding a logical NOT to IsLessThan conditions.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsGreaterThanOrEqualTo.Value``1(``0)">
            <summary>
            Builder method to avoid requiring type generic in the fluent call.
            </summary>
            <typeparam name="TValue">The expected value type.</typeparam>
            <param name="expected">The expected value.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.IsNot`1">
            <summary>
            Inverts the Boolean evaluation of another condition.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsNot`1.#ctor(Boa.Constrictor.Screenplay.ICondition{`0})">
            <summary>
            Private constructor.
            (Use the public builder method instead.)
            </summary>
            <param name="inner">The inner condition.</param>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.IsNot`1.Inner">
            <summary>
            The inner condition.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsNot`1.Condition(Boa.Constrictor.Screenplay.ICondition{`0})">
            <summary>
            Public builder.
            </summary>
            <param name="inner">The inner condition.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsNot`1.Evaluate(`0)">
            <summary>
            Evaluates a logical "NOT" on the value of the inner condition.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IsNot`1.ToString">
            <summary>
            ToString override.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.Matches">
            <summary>
            Condition for matching a regular expression.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Matches.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Private constructor.
            (Use the public builder method instead.)
            </summary>
            <param name="regex">The regular expression to match.</param>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.Matches.RegularExpression">
            <summary>
            The regular expression to match.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Matches.Regex(System.Text.RegularExpressions.Regex)">
            <summary>
            Public builder.
            </summary>
            <param name="regex">The regular expression to match.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Matches.Evaluate(System.String)">
            <summary>
            Checks if the actual string matches the regular expression.
            </summary>
            <param name="actual">The actual string.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Matches.ToString">
            <summary>
            ToString override.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.Actor">
            <summary>
            A screenplay actor that implements IActor.
            An actor can perform tasks and ask questions based on his/her abilities.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Screenplay.Actor.DefaultName">
            <summary>
            The default name to use if no actor name is provided.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Actor.#ctor(System.String,Boa.Constrictor.Logging.ILogger)">
            <summary>
            Constructor.
            Initializes the abilities to be empty.
            </summary>
            <param name="name">The name of the actor. If null, use DefaultName.</param>
            <param name="logger">The logger. If null, use a NoOpLogger.</param>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.Actor.Abilities">
            <summary>
            The collection of abilities.
            Abilities are resolved by type name.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.Actor.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.Actor.Name">
            <summary>
            The name of the actor.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Actor.AsksFor``1(Boa.Constrictor.Screenplay.IQuestion{``0})">
            <summary>
            Asks a question and returns the answer value.
            The actor must have the abilities needed by the question.
            </summary>
            <typeparam name="TAnswer">The answer type.</typeparam>
            <param name="question">The question to ask.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Actor.AskingFor``1(Boa.Constrictor.Screenplay.IQuestion{``0})">
            <summary>
            Alias for "AsksFor".
            </summary>
            <typeparam name="TAnswer">The answer type.</typeparam>
            <param name="question">The question to ask.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Actor.AttemptsTo(Boa.Constrictor.Screenplay.ITask)">
            <summary>
            Performs a task.
            The actor must have the abilities needed by the task.
            </summary>
            <param name="task">The task to perform.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Actor.Calls``1(Boa.Constrictor.Screenplay.IQuestion{``0})">
            <summary>
            Asks a question and returns the answer value.
            The actor must have the abilities needed by the question.
            </summary>
            <typeparam name="TAnswer">The answer type.</typeparam>
            <param name="question">The question to ask.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Actor.Calls(Boa.Constrictor.Screenplay.ITask)">
            <summary>
            Performs a task.
            The actor must have the abilities needed by the task.
            </summary>
            <param name="task">The task to perform.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Actor.Can(Boa.Constrictor.Screenplay.IAbility)">
            <summary>
            Adds an ability.
            </summary>
            <param name="ability">The ability to add.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Actor.HasAbilityTo``1">
            <summary>
            Checks if the actor has the ability.
            </summary>
            <typeparam name="TAbility">The ability type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Actor.Using``1">
            <summary>
            Gets one of the actor's abilities by type so that it may be used.
            </summary>
            <typeparam name="TAbility">The ability type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Actor.ToString">
            <summary>
            Returns the name of this screenplay actor.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.IAbility">
            <summary>
            The interface for actor abilities.
            An actor needs appropriate abilities to do certain tasks.
            For example, any Web-based task needs the ability to interact with a browser.
            Implementing classes should provide attributes and methods for desired behavior.
            </summary>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.IActor">
            <summary>
            A Screenplay actor.
            An actor can perform tasks and ask questions based on his/her abilities.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.IActor.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.IActor.Name">
            <summary>
            The name of the actor.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IActor.AsksFor``1(Boa.Constrictor.Screenplay.IQuestion{``0})">
            <summary>
            Asks a question and returns the answer value.
            The actor must have the abilities needed by the question.
            </summary>
            <typeparam name="TAnswer">The answer type.</typeparam>
            <param name="question">The question to ask.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IActor.AskingFor``1(Boa.Constrictor.Screenplay.IQuestion{``0})">
            <summary>
            Alias for "AsksFor".
            </summary>
            <typeparam name="TAnswer">The answer type.</typeparam>
            <param name="question">The question to ask.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IActor.AttemptsTo(Boa.Constrictor.Screenplay.ITask)">
            <summary>
            Performs a task.
            The actor must have the abilities needed by the task.
            </summary>
            <param name="task">The task to perform.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IActor.Calls``1(Boa.Constrictor.Screenplay.IQuestion{``0})">
            <summary>
            Asks a question and returns the answer value.
            The actor must have the abilities needed by the question.
            </summary>
            <typeparam name="TAnswer">The answer type.</typeparam>
            <param name="question">The question to ask.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IActor.Calls(Boa.Constrictor.Screenplay.ITask)">
            <summary>
            Performs a task.
            The actor must have the abilities needed by the task.
            </summary>
            <param name="task">The task to perform.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IActor.Can(Boa.Constrictor.Screenplay.IAbility)">
            <summary>
            Adds an ability.
            </summary>
            <param name="ability">The ability to add.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IActor.HasAbilityTo``1">
            <summary>
            Checks if the actor has the ability.
            </summary>
            <typeparam name="TAbility">The ability type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IActor.Using``1">
            <summary>
            Gets one of the actor's abilities by type so that it may be used.
            </summary>
            <typeparam name="TAbility">The ability type.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.ICondition`1">
            <summary>
            Represents a Boolean condition to evaluate.
            The condition takes in a generically-typed value.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ICondition`1.Evaluate(`0)">
            <summary>
            Evaluates the condition for the given value.
            </summary>
            <param name="actual">The given value.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.IInteraction">
            <summary>
            The interface for interactions, such as tasks and questions.
            Actors call interactions using abilities.
            </summary>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.IQuestion`1">
            <summary>
            An inquiry made by the actor about the state of the system under test.
            It should return a value representing the inquired state.
            </summary>
            <typeparam name="TAnswer">The answer type.</typeparam>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.IQuestion`1.RequestAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Asks the question and returns an answer.
            </summary>
            <param name="actor">The actor.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.ITask">
            <summary>
            An executable task that an actor can perform.
            It should do one main thing, and it does not return any value.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ITask.PerformAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Performs the task.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.ScreenplayException">
            <summary>
            Should be used for any Screenplay Pattern exceptions.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ScreenplayException.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ScreenplayException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ScreenplayException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.RunTasks">
            <summary>
            Runs a list of other tasks.
            It can be a useful shortcut.
            Tasks are run in the order given by the list.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.RunTasks.#ctor(System.Collections.Generic.IEnumerable{Boa.Constrictor.Screenplay.ITask})">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
            <param name="tasks"></param>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.RunTasks.Tasks">
            <summary>
            The task list.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.RunTasks.InOrder(System.Collections.Generic.IEnumerable{Boa.Constrictor.Screenplay.ITask})">
            <summary>
            Builder method.
            </summary>
            <param name="tasks">The task list.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.RunTasks.InOrder(Boa.Constrictor.Screenplay.ITask[])">
            <summary>
            Builder method.
            </summary>
            <param name="tasks">The task list.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.RunTasks.PerformAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Runs the tasks in the order given by the list.
            </summary>
            <param name="actor"></param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.RunTasks.ToString">
            <summary>
            Returns a description of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.AbstractWait`1">
            <summary>
            Waits for a desired state.
            The desired state is expressed using a question and an expected condition.
            If the desired state does not happen within the time limit, then an exception is thrown.
            
            If the actor has the SetTimeouts ability, then the ability will be used to calculate timeouts.
            Otherwise, DefaultTimeout will be used.
            </summary>
            <typeparam name="TAnswer">The type of the question's answer value.</typeparam>
        </member>
        <member name="F:Boa.Constrictor.Screenplay.AbstractWait`1.DefaultTimeout">
            <summary>
            The default timeout value.
            Use this if an override timeout value is not provided,
            And if the actor does not have the SetTimeouts ability.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.AbstractWait`1.#ctor(Boa.Constrictor.Screenplay.IQuestion{`0},Boa.Constrictor.Screenplay.ICondition{`0})">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="question">The question upon whose answer to wait.</param>
            <param name="condition">The expected condition for which to wait.</param>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.AbstractWait`1.Condition">
            <summary>
            The expected condition for which to wait.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.AbstractWait`1.Question">
            <summary>
            The question upon whose answer to wait.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.AbstractWait`1.TimeoutSeconds">
            <summary>
            The timeout override in seconds.
            If null, use the standard timeout value.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.AbstractWait`1.AdditionalSeconds">
            <summary>
            An additional amount to add to the timeout.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.AbstractWait`1.ActualTimeout">
            <summary>
            The actual timeout used.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.AbstractWait`1.SuppressLogs">
            <summary>
            If true, do not print log messages below "Warning" severity while waiting.
            This is set to true by default.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.AbstractWait`1.CalculateTimeout(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            If the actor has the SetTimeouts ability, then the ability will be used to calculate timeouts.
            Otherwise, DefaultTimeout will be used.
            </summary>
            <param name="actor"></param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.AbstractWait`1.WaitForValue(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Waits until the question's answer value meets the condition.
            If the expected condition is not met within the time limit, then an exception is thrown.
            Returns the actual awaited value.
            </summary>
            <param name="actor">The actor.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.AbstractWait`1.ToString">
            <summary>
            Returns a description of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.SetTimeouts">
            <summary>
            Enables the actor to use default timeout values.
            The "standard" timeout is the amount of time to wait by default.
            This may be overridden by individual calls.
            The "extra" timeout will be added to every timeout, even when the standard timeout is overridden.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Screenplay.SetTimeouts.DefaultStandardTimeout">
            <summary>
            The default standard timeout value in seconds.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.Screenplay.SetTimeouts.DefaultExtraTimeout">
            <summary>
            The default extra timeout value in seconds.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.SetTimeouts.#ctor(System.Int32,System.Int32)">
            <summary>
            Private constructor.
            (Use the static methods for public construction.)
            </summary>
            <param name="standardSeconds">The standard timeout value in seconds.</param>
            <param name="extraSeconds">The extra timeout value in seconds.</param>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.SetTimeouts.StandardSeconds">
            <summary>
            The standard timeout value in seconds.
            This value may be overridden when interactions are called.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.SetTimeouts.ExtraSeconds">
            <summary>
            The extra timeout value in seconds.
            This value is added to the timeout, even when the standard timeout is overridden.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.SetTimeouts.To(System.Int32,System.Int32)">
            <summary>
            Constructs the ability.
            </summary>
            <param name="standardSeconds">The standard timeout value in seconds.</param>
            <param name="extraSeconds">The extra timeout value in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.SetTimeouts.ToDefaultValues">
            <summary>
            Constructs the ability using default values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.SetTimeouts.CalculateTimeout(System.Nullable{System.Int32})">
            <summary>
            Calculates the timeout to use for an interaction.
            If an override value is provided, it overrides the standard timeout.
            The extra timeout value is added even if an override value is provided.
            </summary>
            <param name="overrideSeconds">Overrides the standard timeout value.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.SetTimeouts.ToString">
            <summary>
            Returns a description of this ability.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.ValueAfterWaiting`1">
            <summary>
            Waits for a desired state.
            The desired state is expressed using a question and an expected condition.
            If the desired state does not happen within the time limit, then an exception is thrown.
            
            If the actor has the SetTimeouts ability, then the ability will be used to calculate timeouts.
            Otherwise, DefaultTimeout will be used.
            </summary>
            <typeparam name="TAnswer">The type of the question's answer value.</typeparam>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ValueAfterWaiting`1.#ctor(Boa.Constrictor.Screenplay.IQuestion{`0},Boa.Constrictor.Screenplay.ICondition{`0})">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="question">The question upon whose answer to wait.</param>
            <param name="condition">The expected condition for which to wait.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ValueAfterWaiting`1.Until(Boa.Constrictor.Screenplay.IQuestion{`0},Boa.Constrictor.Screenplay.ICondition{`0})">
            <summary>
            Constructs the question.
            </summary>
            <param name="question">The question upon whose answer to wait.</param>
            <param name="condition">The expected condition for which to wait.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ValueAfterWaiting`1.ForUpTo(System.Nullable{System.Int32})">
            <summary>
            Sets an override value for timeout seconds.
            </summary>
            <param name="seconds">The new timeout in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ValueAfterWaiting`1.ForAnAdditional(System.Int32)">
            <summary>
            Adds an additional amount to the timeout.
            </summary>
            <param name="seconds">The seconds to add to the timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ValueAfterWaiting`1.ButDontSuppressLogs">
            <summary>
            Sets the flag to suppress logs to false.
            All logs will be printed during waiting.
            This may generate lots of spam.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ValueAfterWaiting`1.RequestAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Waits until the question's answer value meets the condition.
            If the expected condition is not met within the time limit, then an exception is thrown.
            Returns the actual value after waiting.
            </summary>
            <param name="actor">The actor.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.ValueAfterWaiting">
            <summary>
            Static builder class to help readability of fluent calls for ValueAfterWaiting.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.ValueAfterWaiting.Until``1(Boa.Constrictor.Screenplay.IQuestion{``0},Boa.Constrictor.Screenplay.ICondition{``0})">
            <summary>
            Constructs a ValueAfterWaiting question.
            This variant allows "ValueAfterWaiting.Until" calls to avoid generic type specification.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="question">The question upon whose answer to wait.</param>
            <param name="condition">The expected condition for which to wait.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.Wait`1">
            <summary>
            Waits for a desired state.
            The desired state is expressed using a question and an expected condition.
            If the desired state does not happen within the time limit, then an exception is thrown.
            
            If the actor has the SetTimeouts ability, then the ability will be used to calculate timeouts.
            Otherwise, DefaultTimeout will be used.
            </summary>
            <typeparam name="TAnswer">The type of the question's answer value.</typeparam>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Wait`1.#ctor(Boa.Constrictor.Screenplay.IQuestion{`0},Boa.Constrictor.Screenplay.ICondition{`0})">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="question">The question upon whose answer to wait.</param>
            <param name="condition">The expected condition for which to wait.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Wait`1.Until(Boa.Constrictor.Screenplay.IQuestion{`0},Boa.Constrictor.Screenplay.ICondition{`0})">
            <summary>
            Constructs the question.
            </summary>
            <param name="question">The question upon whose answer to wait.</param>
            <param name="condition">The expected condition for which to wait.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Wait`1.ForUpTo(System.Nullable{System.Int32})">
            <summary>
            Sets an override value for timeout seconds.
            </summary>
            <param name="seconds">The new timeout in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Wait`1.ForAnAdditional(System.Int32)">
            <summary>
            Adds an additional amount to the timeout.
            </summary>
            <param name="seconds">The seconds to add to the timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Wait`1.ButDontSuppressLogs">
            <summary>
            Sets the flag to suppress logs to false.
            All logs will be printed during waiting.
            This may generate lots of spam.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Wait`1.PerformAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Waits until the question's answer value meets the condition.
            If the expected condition is not met within the time limit, then an exception is thrown.
            </summary>
            <param name="actor">The actor.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.Wait">
            <summary>
            Static builder class to help readability of fluent calls for Wait.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.Wait.Until``1(Boa.Constrictor.Screenplay.IQuestion{``0},Boa.Constrictor.Screenplay.ICondition{``0})">
            <summary>
            Constructs a Wait task.
            This variant allows "Wait.Until" calls to avoid generic type specification.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="question">The question upon whose answer to wait.</param>
            <param name="condition">The expected condition for which to wait.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.WaitingException`1">
            <summary>
            This exception should be thrown when the Wait interaction fails to meet its expected condition.
            It provides attributes for the actual value, the question, and the condition.
            </summary>
            <typeparam name="TAnswer">The type of the question's answer value.</typeparam>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.WaitingException`1.#ctor(System.String,Boa.Constrictor.Screenplay.AbstractWait{`0},`0)">
            <summary>
            Most basic constructor.
            </summary>
            <param name="message">The exception message.</param>
            <param name="interaction">The waiting interaction.</param>
            <param name="actual">The actual value received after waiting.</param>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.WaitingException`1.#ctor(Boa.Constrictor.Screenplay.AbstractWait{`0},`0)">
            <summary>
            Constructor.
            </summary>
            <param name="interaction">The waiting interaction.</param>
            <param name="actual">The actual value received after waiting.</param>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.WaitingException`1.ActualValue">
            <summary>
            The actual value received after waiting.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.Screenplay.WaitingException`1.Interaction">
            <summary>
            The waiting interaction.
            </summary>
        </member>
        <member name="T:Boa.Constrictor.Screenplay.WaitingExtensions">
            <summary>
            Provides IActor extension methods to simplify waiting syntax.
            
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Screenplay.WaitingExtensions.WaitsUntil``1(Boa.Constrictor.Screenplay.IActor,Boa.Constrictor.Screenplay.IQuestion{``0},Boa.Constrictor.Screenplay.ICondition{``0},System.Nullable{System.Int32},System.Int32)">
            <summary>
            A simplified extension method for waiting.
            Calls will look like `Actor.WaitsUntil(...)` instead of `Actor.AsksFor(ValueAfterWaiting.Until(...))`.
            </summary>
            <typeparam name="TAnswer">The type of the question's answer value.</typeparam>
            <param name="actor">The Screenplay actor.</param>
            <param name="question">The question upon whose answer to wait.</param>
            <param name="condition">The expected condition for which to wait.</param>
            <param name="timeout">The timeout override in seconds. If null, use the standard timeout value.</param>
            <param name="additional">An additional amount to add to the timeout. Defaults to 0.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Utilities.Names">
            <summary>
            Provides static methods for handling names.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Utilities.Names.ConcatUniqueName(System.String,System.String)">
            <summary>
            Returns a unique name for a file using a UTC timestamp and an optional suffix.
            Format: {name}_{timestamp}(_{suffix})?(_{thread})?
            Warning: Do NOT include a file extension in the name!
            </summary>
            <param name="name">Base name for the file.</param>
            <param name="suffix">An optional suffix.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.Utilities.Retries">
            <summary>
            Provides helper methods to retry actions.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Utilities.Retries.RetryOnException``2(System.Func{``1},System.String,System.Int32,System.Int32,Boa.Constrictor.Logging.ILogger)">
            <summary>
            Attempts to avoid exceptions by automatically retrying web interactions.
            Rethrows the exception if the maximum number of attempts is exceeded.
            Why is this useful? Some Selenium WebDriver methods are known to be intermittently unreliable.
            </summary>
            <typeparam name="TException">The exception type.</typeparam>
            <typeparam name="TReturn">The interaction value return type.</typeparam>
            <param name="interaction">A function that performs the interaction and returns a value.</param>
            <param name="callName">A description for the interaction (for logging).</param>
            <param name="attempts">The maximum number of attempts before giving up.</param>
            <param name="delayMilliseconds">The milliseconds to wait before each retry.</param>
            <param name="logger">The logger. If null, no warning are logged.</param>
        </member>
        <member name="T:Boa.Constrictor.Utilities.Urls">
            <summary>
            Provides methods for handling URLs.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.Utilities.Urls.Combine(System.String,System.String)">
            <summary>
            Concatenates a base URL and a relative URL.
            Automatically handles the "/" in between.
            </summary>
            <param name="baseUrl">The base URL.</param>
            <param name="relativeUrl">The relative URL.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.BrowseTheWeb">
            <summary>
            Enables the actor to use a Web browser via Selenium WebDriver.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowseTheWeb.#ctor(OpenQA.Selenium.IWebDriver)">
            <summary>
            Private constructor.
            (Use the static methods for public construction.)
            </summary>
            <param name="driver">The WebDriver instance.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.BrowseTheWeb.WebDriver">
            <summary>
            The WebDriver instance.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.BrowseTheWeb.StoredWindowHandles">
            <summary>
            The collection of stored browser window handles.
            This collection should be referenced when searching for new handles.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowseTheWeb.With(OpenQA.Selenium.IWebDriver)">
            <summary>
            Constructs this object with the given WebDriver.
            </summary>
            <param name="driver">The WebDriver instance.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowseTheWeb.ToString">
            <summary>
            Returns a description of this ability.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.IWebLocator">
            <summary>
            An interface for locating Web elements on a page.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.IWebLocator.Description">
            <summary>
            Plain-language description of the Web element (used for logging).
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.IWebLocator.Query">
            <summary>
            Query for the Web element.
            </summary>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.IWebLocatorUser">
            <summary>
            Adds an IWebLocator property to a class.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.IWebLocatorUser.Locator">
            <summary>
            The Web locator.
            </summary>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.WebLocator">
            <summary>
            The concrete implementation of IWebLocator.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WebLocator.Id(System.String)">
            <summary>
            Convenient builder method for constructing WebLocator objects for IDs.
            </summary>
            <param name="id">The target element ID.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WebLocator.L(System.String,OpenQA.Selenium.By)">
            <summary>
            Convenient builder method for constructing WebLocator objects without too much text.
            </summary>
            <param name="description">Plain-language description of the Web element (used for logging).</param>
            <param name="query">Query for the Web element.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WebLocator.Link(System.String)">
            <summary>
            Convenient builder method for constructing WebLocator objects for links.
            </summary>
            <param name="linkText">The link text.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WebLocator.PartialLink(System.String)">
            <summary>
            Convenient builder method for constructing WebLocator objects for links using partial (not full) text.
            </summary>
            <param name="linkText">The link text.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WebLocator.#ctor(System.String,OpenQA.Selenium.By)">
            <summary>
            Constructor.
            </summary>
            <param name="description">Plain-language description of the Web element (used for logging).</param>
            <param name="query">Query for the Web element.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.WebLocator.Description">
            <summary>
            Plain-language description of the Web element (used for logging).
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.WebLocator.Query">
            <summary>
            Query for the Web element.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WebLocator.Equals(System.Object)">
            <summary>
            Checks if this locator is equal to another locator.
            </summary>
            <param name="obj">The other object.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WebLocator.GetHashCode">
            <summary>
            Gets a unique hash code for the locator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WebLocator.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.AbstractWebLocatorQuestion`1">
            <summary>
            This is an abstract superclass for any Web questions that use a Web element locator.
            </summary>
            <typeparam name="TAnswer"></typeparam>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebLocatorQuestion`1.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructor.
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.AbstractWebLocatorQuestion`1.ToStringAdjective">
            <summary>
            The adjective to use for the Locator in the ToString method.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.AbstractWebLocatorQuestion`1.Locator">
            <summary>
            The target Web element's locator.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebLocatorQuestion`1.RequestAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Asks the question and returns the answer.
            Internally calls RequestAs with the WebDriver from the BrowseTheWeb ability.
            Internally retries the interaction if StaleElementReferenceException happens.
            </summary>
            <param name="actor">The screenplay actor.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebLocatorQuestion`1.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebLocatorQuestion`1.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebLocatorQuestion`1.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.AbstractWebLocatorTask">
            <summary>
            Abstract class for any Web tasks that use a Web element locator.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebLocatorTask.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructor.
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.AbstractWebLocatorTask.ToStringAdjective">
            <summary>
            The adjective to use for the Locator in the ToString method.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.AbstractWebLocatorTask.Locator">
            <summary>
            The target Web element's locator.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebLocatorTask.PerformAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Attempts the task.
            Internally calls RequestAs with the WebDriver from the BrowseTheWeb ability.
            Internally retries the interaction if StaleElementReferenceException happens.
            </summary>
            <param name="actor">The screenplay actor.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebLocatorTask.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebLocatorTask.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebLocatorTask.ToString">
            <summary>
            Returns a description of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.AbstractWebPropertyQuestion`1">
            <summary>
            Abstract class for any Web questions that use a Web element locator and a property name.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebPropertyQuestion`1.#ctor(Boa.Constrictor.WebDriver.IWebLocator,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="propertyName">The name of the property to access.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.AbstractWebPropertyQuestion`1.ToStringAdjective">
            <summary>
            The adjective to use for the Locator in the ToString method.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.AbstractWebPropertyQuestion`1.PropertyName">
            <summary>
            The name of the property to access.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebPropertyQuestion`1.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebPropertyQuestion`1.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebPropertyQuestion`1.ToString">
            <summary>
            Returns a description of the property question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.AbstractWebQuestion`1">
            <summary>
            Abstract class that makes it easier to write questions that use the BrowseTheWeb ability.
            </summary>
            <typeparam name="TAnswer">The answer type.</typeparam>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebQuestion`1.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Asks the question and returns the answer.
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver from the BrowseTheWeb ability.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebQuestion`1.RequestAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Asks the question and returns the answer.
            Internally calls RequestAs with the WebDriver from the BrowseTheWeb ability.
            </summary>
            <param name="actor">The screenplay actor.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebQuestion`1.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebQuestion`1.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebQuestion`1.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.AbstractWebTask">
            <summary>
            Abstract class that makes it easier to write tasks that use the BrowseTheWeb ability.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebTask.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Performs the task.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver from the BrowseTheWeb ability.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebTask.PerformAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Performs the task.
            Internally calls PerformAs with the WebDriver from the BrowseTheWeb ability.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebTask.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebTask.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AbstractWebTask.ToString">
            <summary>
            Returns a description of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.BrowserInteractionException">
            <summary>
            Should be used for any Screenplay WebDriver interaction exceptions.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserInteractionException.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserInteractionException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserInteractionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.ElementLists">
            <summary>
            Useful methods for handling multiple elements.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ElementLists.GetValues(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver,Boa.Constrictor.WebDriver.IWebLocator,System.Func{OpenQA.Selenium.IWebElement,System.String})">
            <summary>
            Finds all Web elements on the page matching the provided locator and gets a value from each.
            </summary>
            <param name="actor">The Screenplay actor.</param>
            <param name="driver">The Selenium web driver.</param>
            <param name="locator">Locator used to find Web elements.</param>
            <param name="getValue">The method used to obtain the desired value from each Web element.</param>
            <returns>A list of string values from each Web element found.</returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.AlertPresence">
            <summary>
            Returns the presence of an alert in the browser.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AlertPresence.#ctor">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AlertPresence.InBrowser">
            <summary>
            Constructs the question.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AlertPresence.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the presence of an alert in the browser.
            Returns true if an alert is there; false otherwise.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AlertPresence.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.Appearance">
            <summary>
            Gets a Web element's displayed state.
            Note that an element can exist without being displayed,
            But it cannot be displayed without existing.
            Warning: This method does NOT wait for the element to exist first!
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Appearance.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Appearance.Of(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Appearance.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Returns true if the element exists and is displayed on the page; false otherwise.
            Note that an element can exist without being displayed,
            But it cannot be displayed without existing.
            Warning: This method does NOT wait for the element to exist first!
            Furthermore, if StaleElementReferenceException happens, this returns false.
            https://docs.seleniumhq.org/exceptions/stale_element_reference.jsp
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.BrowserCookie">
            <summary>
            Gets the desired OpenQA.Selenium.Cookie from the WebDriver.
            Waits for the cookie to be added to the browser if it is not there.
            Internally calls Wait for waiting.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserCookie.#ctor(System.String)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="cookieName">The name of the desired cookie.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.BrowserCookie.CookieName">
            <summary>
            The name of the desired cookie.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserCookie.Named(System.String)">
            <summary>
            Constructs the question.
            </summary>
            <param name="cookieName">The name of the desired cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserCookie.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the desired OpenQA.Selenium.Cookie from the WebDriver.
            Waits for the cookie to be added to the browser if it is not there.
            Internally calls Wait for waiting.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserCookie.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserCookie.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserCookie.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.BrowserCookieExistence">
            <summary>
            Checks if the browser cookie exists.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserCookieExistence.#ctor(System.String)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="cookieName">The name of the desired cookie.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.BrowserCookieExistence.CookieName">
            <summary>
            The name of the desired cookie.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserCookieExistence.Named(System.String)">
            <summary>
            Constructs the question.
            </summary>
            <param name="cookieName">The name of the desired cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserCookieExistence.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Checks if the browser cookie exists.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserCookieExistence.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserCookieExistence.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.BrowserCookieExistence.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.Classes">
            <summary>
            Gets the list of the Web element's CSS classes.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Classes.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Classes.Of(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Classes.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the list of the Web element's CSS classes.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.Count">
            <summary>
            Gets the total number of elements found on the page by the locator.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Count.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Count.Of(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Count.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the total number of elements found on the page by the locator.
            Don't wait because count should be immediate.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.CssValue">
            <summary>
            Gets a web element's CSS value by property name.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CssValue.#ctor(Boa.Constrictor.WebDriver.IWebLocator,System.String)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="propertyName">The attribute name.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CssValue.Of(Boa.Constrictor.WebDriver.IWebLocator,System.String)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="named">The property name.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CssValue.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets a web element's CSS value by property name.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.CssValueList">
            <summary>
            Gets web elements' CSS values by property name.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CssValueList.#ctor(Boa.Constrictor.WebDriver.IWebLocator,System.String)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="propertyName">The attribute name.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CssValueList.For(Boa.Constrictor.WebDriver.IWebLocator,System.String)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="named">The attribute name.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CssValueList.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets web elements' CSS values by property name.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.CurrentScreenshot">
            <summary>
            Captures a screenshot of the current Web browser and return its path.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.WebDriver.CurrentScreenshot.DefaultImageFormat">
            <summary>
            The default screenshot image format.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CurrentScreenshot.#ctor(System.String,System.String)">
            <summary>
            Private constructor.
            Uses default values for format and prefix.
            (Use static methods for public construction.)
            </summary>
            <param name="outputDir">The path to the output directory where screenshot image files will be saved.</param>
            <param name="fileName">The file name (without the extension).</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.CurrentScreenshot.FileName">
            <summary>
            The file name for the screenshot image.
            Do NOT include the directory or the extension!
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.CurrentScreenshot.Format">
            <summary>
            Image file format.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.CurrentScreenshot.OutputDir">
            <summary>
            The path to the output directory where screenshot image files will be saved.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CurrentScreenshot.SavedTo(System.String,System.String)">
            <summary>
            Constructs the question object.
            </summary>
            <param name="outputDir">The output directory.</param>
            <param name="fileName">The file name (without the extension).</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CurrentScreenshot.UsingFormat(OpenQA.Selenium.ScreenshotImageFormat)">
            <summary>
            Changes the image format.
            </summary>
            <param name="format">Image file format.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CurrentScreenshot.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Captures a screenshot and saves it to an image file in the <i>OutputDir</i> directory.
            Creates the directory if it does not already exist.
            Returns the path to the screenshot file.
            The file name will include a timestamp and the thread name if not explicitly provided.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CurrentScreenshot.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CurrentScreenshot.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CurrentScreenshot.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.CurrentUrl">
            <summary>
            Gets the current WebDriver URL.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CurrentUrl.#ctor">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CurrentUrl.FromBrowser">
            <summary>
            Constructs the question.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CurrentUrl.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the current WebDriver URL.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.CurrentUrl.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.EnabledState">
            <summary>
            Gets a Web element's enabled state.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.EnabledState.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.EnabledState.Of(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.EnabledState.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Returns true if the element is enabled on the page; false otherwise.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.Existence">
            <summary>
            Gets a Web element's existence.
            "Existence" means that the element is present in the DOM.
            Note that an element can exist without being displayed.
            Warning: This method does NOT wait for the element to exist first!
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Existence.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Existence.Of(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Existence.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Returns true if at least one element exists on the page for the locator; false otherwise.
            "Existence" means that the element is present in the DOM.
            Note that an element can exist without being displayed.
            Warning: This method does NOT wait for the element to exist first!
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.HtmlAttribute">
            <summary>
            Gets a web element's HTML attribute by name.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.HtmlAttribute.#ctor(Boa.Constrictor.WebDriver.IWebLocator,System.String)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="propertyName">The attribute name.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.HtmlAttribute.Of(Boa.Constrictor.WebDriver.IWebLocator,System.String)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="named">The attribute name.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.HtmlAttribute.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets a web element's HTML attribute by name.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.IdAttribute">
            <summary>
            Gets a web element's "id" attribute.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.WebDriver.IdAttribute.Id">
            <summary>
            The "id" attribute name.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.IdAttribute.Of(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs a HtmlAttribute question for the "id" attribute.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.ValueAttribute">
            <summary>
            Gets a web element's "value" attribute.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.WebDriver.ValueAttribute.Value">
            <summary>
            The "value" attribute name.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ValueAttribute.Of(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs a HtmlAttribute question for the "value" attribute.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.HtmlAttributeList">
            <summary>
            Gets web elements' HTML attributes by name.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.HtmlAttributeList.#ctor(Boa.Constrictor.WebDriver.IWebLocator,System.String)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="propertyName">The attribute name.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.HtmlAttributeList.For(Boa.Constrictor.WebDriver.IWebLocator,System.String)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="named">The attribute name.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.HtmlAttributeList.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets web elements' HTML attributes by name.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.IdAttributeList">
            <summary>
            Gets a list of Web elements' id values.
            Useful when working with a group of Web elements whose ids are unique, but not consistent.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.WebDriver.IdAttributeList.Id">
            <summary>
            The "id" attribute name.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.IdAttributeList.For(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs a HtmlAttributeList question for the "id" attribute.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.ValueAttributeList">
            <summary>
            Gets a list of Web elements' "value" values.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.WebDriver.ValueAttributeList.Value">
            <summary>
            The "value" attribute name.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ValueAttributeList.For(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs a HtmlAttributeList question for the "value" attribute.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.JavaScript`1">
            <summary>
            Makes a direct JavaScript call in the browser and returns the result.
            The call may optionally take arguments.
            To use arguments in the script, refer to them using the "arguments" list.
            For example, "arguments[0]" would be the first argument.
            Use "Actor.Calls()" instead of "Actor.AsksFor()" for this Question.
            </summary>
            <typeparam name="TValue">The answer type.</typeparam>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScript`1.#ctor(Boa.Constrictor.WebDriver.IWebLocator,System.String,System.Object[])">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The Web element locator. (null for no locator)</param>
            <param name="script">The JavaScript code to execute.</param>
            <param name="args">Arguments for the JavaScript code to execute.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.JavaScript`1.Script">
            <summary>
            The JavaScript code to execute.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.JavaScript`1.Args">
            <summary>
            Arguments for the JavaScript code to execute.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScript`1.OnPage(System.String,System.Object[])">
            <summary>
            Constructs the question without a target element.
            </summary>
            <param name="script">The JavaScript code to execute.</param>
            <param name="args">Arguments for the JavaScript code to execute.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScript`1.On(Boa.Constrictor.WebDriver.IWebLocator,System.String,System.Object[])">
            <summary>
            Constructs the question with a target element.
            </summary>
            <param name="locator">The Web element locator.</param>
            <param name="script">The JavaScript code to execute.</param>
            <param name="args">Arguments for the JavaScript code to execute.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScript`1.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets a web element's JavaScript textContent value.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScript`1.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScript`1.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScript`1.ToString">
            <summary>
            Returns a description of the question.
            The script and the arguments will be printed during execution.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.JavaScript">
            <summary>
            Static builder class to help readability of fluent calls for JavaScript interactions.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScript.OnPage(System.String,System.Object[])">
            <summary>
            Constructs a JavaScript question.
            This variant allows "JavaScript.InBrowser" calls to avoid generic type specification.
            </summary>
            <param name="script">The JavaScript code to execute.</param>
            <param name="args">Arguments for the JavaScript code to execute.></param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScript.On(Boa.Constrictor.WebDriver.IWebLocator,System.String,System.Object[])">
            <summary>
            Constructs a JavaScript question.
            This variant allows "JavaScript.On" calls to avoid generic type specification.
            </summary>
            <param name="locator">The Web element locator.</param>
            <param name="script">The JavaScript code to execute.</param>
            <param name="args">Arguments for the JavaScript code to execute.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.JavaScriptProperty">
            <summary>
            Gets a web element's JavaScript property value.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScriptProperty.#ctor(Boa.Constrictor.WebDriver.IWebLocator,System.String)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScriptProperty.Of(Boa.Constrictor.WebDriver.IWebLocator,System.String)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="named">The property name.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScriptProperty.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets a web element's JavaScript property value.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.JavaScriptText">
            <summary>
            Gets a web element's JavaScript textContent value.
            As a best practice, use the Text interaction instead.
            Use JavaScriptText only when direct JavaScript values are needed.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScriptText.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScriptText.Of(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScriptText.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets a web element's JavaScript textContent value.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.Location">
            <summary>
            Gets a Web element's location.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Location.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Location.Of(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Location.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the Web element's location.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.PixelSize">
            <summary>
            Gets the size of the web element.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.PixelSize.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.PixelSize.Of(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.PixelSize.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the size of the web element.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.SelectedOptionText">
            <summary>
            Gets the text of a select Web element's selected option.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SelectedOptionText.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SelectedOptionText.Of(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SelectedOptionText.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the text of a select Web element's selected option.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.SelectedState">
            <summary>
            Gets a Web element's selected state.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SelectedState.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SelectedState.Of(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SelectedState.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Returns true if the element is selected; otherwise false.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.SelectOptionsAvailable">
            <summary>
            Gets the text of a select Web element's selected option.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SelectOptionsAvailable.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SelectOptionsAvailable.For(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SelectOptionsAvailable.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the text of a select Web element's selected option.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.SystemNetCookie">
            <summary>
            Gets the desired cookie from the WebDriver as a System.Net.Cookie.
            Internally calls BrowserCookie and converts the internal OpenQA.Selenium.Cookie.
            Optionally reset the cookie's expiration.
            Warning: The cookie's expiration will be wrong.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SystemNetCookie.#ctor(System.String)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="cookieName">The name of the desired cookie.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.SystemNetCookie.CookieName">
            <summary>
            The name of the desired cookie.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.SystemNetCookie.Expiration">
            <summary>
            If not null, resets the cookie expiration.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SystemNetCookie.Named(System.String)">
            <summary>
            Constructs the question.
            </summary>
            <param name="cookieName">The name of the desired cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SystemNetCookie.AndResetExpirationTo(System.DateTime)">
            <summary>
            Resets the cookie's expiration.
            </summary>
            <param name="expiration">The expiration date and time.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SystemNetCookie.AndResetFutureExpirationTo(System.TimeSpan)">
            <summary>
            Resets the cookie's expiration relative to the current date and time.
            </summary>
            <param name="span">The time span by which to increase the expiration.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SystemNetCookie.RequestAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Gets the desired cookie from the WebDriver as a System.Net.Cookie.
            Internally calls BrowserCookie and converts the internal OpenQA.Selenium.Cookie.
            Optionally reset the cookie's expiration.
            Warning: The cookie's expiration will be wrong.
            </summary>
            <param name="actor">The actor.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SystemNetCookie.Equals(System.Object)">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SystemNetCookie.GetHashCode">
            <summary>
            Returns a description of the question.
            The script and the arguments will be printed during execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SystemNetCookie.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.TagName">
            <summary>
            Gets the web element's tag name.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.TagName.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.TagName.Of(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.TagName.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the web element's tag name.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.Text">
            <summary>
            Gets a Web element's text.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Text.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Text.Of(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Text.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the Web element's text.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.TextList">
            <summary>
            Gets a list of Web elements' text values.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.TextList.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.TextList.For(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the question.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.TextList.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the Web element's text.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.Title">
            <summary>
            Gets a Web page's title.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Title.#ctor">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Title.OfPage">
            <summary>
            Constructs the question.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Title.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the Web page's title.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Title.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.WindowHandle">
            <summary>
            Gets one of the WebDriver window handles.
            Getting the latest handle requires the SetTimeouts ability.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.WebDriver.WindowHandle.Index_First">
            <summary>
            A constant representing the index for the first handle.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.WebDriver.WindowHandle.Index_Last">
            <summary>
            A constant representing the index for the last handle.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.WebDriver.WindowHandle.Index_Current">
            <summary>
            A constant representing the index for the current handle.
            </summary>
        </member>
        <member name="F:Boa.Constrictor.WebDriver.WindowHandle.Index_Latest">
            <summary>
            A constant representing the index for the latest handle.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WindowHandle.#ctor(System.Int32)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
            <param name="index">The index of the desired window handle.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.WindowHandle.Index">
            <summary>
            The index of the desired window handle.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WindowHandle.First">
            <summary>
            Constructs the question to get the first handle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WindowHandle.Last">
            <summary>
            Constructs the question to get the last handle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WindowHandle.Current">
            <summary>
            Constructs the question to get the current handle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WindowHandle.Latest">
            <summary>
            Constructs the question to get the latest handle.
            If more than one handle are new, navigates to the first one in the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WindowHandle.At(System.Int32)">
            <summary>
            Constructs the question to get the handle at the given index.
            </summary>
            <param name="index">The index of the desired window handle.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WindowHandle.GetLatestHandle(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Attempts to get the latest window handle.
            </summary>
            <param name="actor">The actor.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WindowHandle.RequestAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the desired WebDriver window handles.
            Throws a BrowserInteractionException if the index is out of bounds.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WindowHandle.Equals(System.Object)">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WindowHandle.GetHashCode">
            <summary>
            Returns a description of the question.
            The script and the arguments will be printed during execution.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.AcceptAlert">
            <summary>
            Accepts a browser alert.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AcceptAlert.#ctor(System.Boolean)">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
            <param name="rethrow">If true, rethrow NoAlertPresentException if it occurs.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.AcceptAlert.RethrowNoAlert">
            <summary>
            If true, rethrow NoAlertPresentException if it occurs.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AcceptAlert.ThatMustExist">
            <summary>
            Constructs the task object.
            Will rethrow NoAlertPresentException.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AcceptAlert.IfItExists">
            <summary>
            Constructs the task object.
            Will bury NoAlertPresentException quietly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AcceptAlert.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Navigates the browser to the target URL.
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AcceptAlert.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AcceptAlert.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AcceptAlert.ToString">
            <summary>
            Returns a description of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.AddBrowserCookie">
            <summary>
            Adds a cookie to the browser through the WebDriver instance.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AddBrowserCookie.#ctor(OpenQA.Selenium.Cookie)">
            <summary>
            Private constructor.
            (Use public builder methods instead.)
            </summary>
            <param name="cookie">The cookie to add to the WebDriver.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.AddBrowserCookie.Cookie">
            <summary>
            The cookie to add to the WebDriver.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AddBrowserCookie.Named(OpenQA.Selenium.Cookie)">
            <summary>
            Creates the task.
            </summary>
            <param name="cookie">The cookie to add to the WebDriver.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AddBrowserCookie.Named(System.String,System.String)">
            <summary>
            Creates the task.
            </summary>
            <param name="name">The cookie name.</param>
            <param name="value">The cookie value.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AddBrowserCookie.Named(System.Net.Cookie)">
            <summary>
            Creates the task.
            </summary>
            <param name="cookie">The cookie to add to the WebDriver.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AddBrowserCookie.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Adds the cookie to the WebDriver.
            Sometimes, adding the cookie fails, so keep retrying until it works.
            </summary>
            <param name="actor">The Screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AddBrowserCookie.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AddBrowserCookie.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            Warning: Cookies with the same names but different values have the same hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.AddBrowserCookie.ToString">
            <summary>
            Returns a description of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.ChangeWebDriver">
            <summary>
            Changes the WebDriver instance in the Actor's BrowseTheWeb Ability.
            Sometimes, WebDriver instances can arbitrarily fail due to problems with the tool, not the web app under test.
            This Task enables the Actor to "recover" by providing it with a new WebDriver instance.
            
            USE THIS TASK WITH CAUTION!
            Changing the WebDriver instance could be dangerous.
            Make sure to quit the old WebDriver first.
            Also make sure that automation can continue after the WebDriver change.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.ChangeWebDriver.NewDriver">
            <summary>
            The new WebDriver instance.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.ChangeWebDriver.QuitOldDriver">
            <summary>
            If true, attempt to quit the old WebDriver instance before replacing it.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ChangeWebDriver.#ctor(OpenQA.Selenium.IWebDriver,System.Boolean)">
            <summary>
            Private constructor.
            (Use public builder methods instead.)
            </summary>
            <param name="newDriver">The new WebDriver instance.</param>
            <param name="quitOldDriver">If true, attempt to quit the old WebDriver instance before replacing it.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ChangeWebDriver.To(OpenQA.Selenium.IWebDriver)">
            <summary>
            Creates the Task.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ChangeWebDriver.AfterQuittingOldWebDriver">
            <summary>
            Forces this Task to quit the old WebDriver instance before changing to the new one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ChangeWebDriver.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Refreshes the browser.
            </summary>
            <param name="actor">The Screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ChangeWebDriver.ToString">
            <summary>
            Returns a description of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.Clear">
            <summary>
            Clears the text of the Web element.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Clear.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Clear.On(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the task object.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Clear.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Clears the text of the web element.
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.Click">
            <summary>
            Clicks a Web element.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Click.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Click.On(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the task object.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Click.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Clicks the web element.
            Use browser actions instead of direct click (due to IE).
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.Hover">
            <summary>
            Hovers over a Web element.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Hover.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Hover.Over(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the task object.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Hover.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Hovers over the web element.
            Make sure the proper locator is used, or else hovering may have no effect!
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.JavaScriptClick">
            <summary>
            Clicks an element directly using JavaScript.
            Warning: Do this ONLY if conventional clicking does not work.
            This should be a last-ditch effort because it does not exercise the page like a normal user.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScriptClick.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScriptClick.On(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the task object.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.JavaScriptClick.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Clicks the web element.
            Use browser actions instead of direct click (due to IE).
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.MaximizeWindow">
            <summary>
            Maximizes the browser window.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.MaximizeWindow.#ctor">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.MaximizeWindow.ForBrowser">
            <summary>
            Constructs the task object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.MaximizeWindow.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Maximizes the browser window.
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.MaximizeWindow.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.Navigate">
            <summary>
            Navigates the browser to a specific URL.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Navigate.#ctor(System.String)">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
            <param name="url">The target URL.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.Navigate.Url">
            <summary>
            The target URL.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Navigate.ToUrl(System.String)">
            <summary>
            Constructs the task object for the given URL.
            </summary>
            <param name="url">The target URL.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Navigate.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Navigates the browser to the target URL.
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Navigate.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Navigate.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Navigate.ToString">
            <summary>
            Returns a description of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.NavigateIfNew">
            <summary>
            Sometimes, the browser is already at the desired page, and it would be wasteful to reload.
            This task will navigate the browser to a new URL only if the browser is not already acceptable.
            A regex for acceptable URLs is used because there could be more than one acceptable URL.
            By default, alerts are automatically accepted, but that can be overridden.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.NavigateIfNew.#ctor(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
            <param name="url">The target URL.</param>
            <param name="acceptable">The regex for acceptable URLs. If null, use the target URL.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.NavigateIfNew.Url">
            <summary>
            The target URL.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.NavigateIfNew.Acceptable">
            <summary>
            The regex for acceptable URLs.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.NavigateIfNew.AcceptAlerts">
            <summary>
            If true, forcibly accept alerts.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.NavigateIfNew.ToUrl(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Constructs the task object.
            </summary>
            <param name="url">The target URL.</param>
            <param name="ifNot">The regex for acceptable URLs. If null, use the target URL.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.NavigateIfNew.AndAcceptAlerts(System.Boolean)">
            <summary>
            Sets the task to forcibly accept any alerts that appear.
            </summary>
            <param name="accept">Flag indicating if alerts should be accepted.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.NavigateIfNew.PerformAs(Boa.Constrictor.Screenplay.IActor)">
            <summary>
            Navigates the browser to the target URL if necessary.
            </summary>
            <param name="actor">The screenplay actor.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.NavigateIfNew.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.NavigateIfNew.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.NavigateIfNew.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.QuitWebDriver">
            <summary>
            Quits the WebDriver.
            WARNING: Once a WebDriver is quit, it cannot be used again.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.QuitWebDriver.#ctor">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.QuitWebDriver.ForBrowser">
            <summary>
            Constructs the task object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.QuitWebDriver.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Quits the WebDriver.
            WARNING: Do NOT call this from steps!
            Once a WebDriver is quit, it cannot be used again.
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.QuitWebDriver.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.Refresh">
            <summary>
            Refreshes the page in the browser.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Refresh.#ctor">
            <summary>
            Private constructor.
            (Use public builder methods instead.)
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Refresh.Browser">
            <summary>
            Creates the task.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Refresh.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Refreshes the browser.
            </summary>
            <param name="actor">The Screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Refresh.ToString">
            <summary>
            Returns a description of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.ScrollContainer">
            <summary>
            Scrolls a container to a specific top and/or left point using JavaScript.
            "Top" means the content of the container is moved up so lower content comes into view.
            "Left" means the content of the container is moved to the left so content to the right comes into view.
            Top scroll happens before left scroll.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollContainer.#ctor(Boa.Constrictor.WebDriver.IWebLocator,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="top">The target top scroll pixel value. If null, don't scroll.</param>
            <param name="left">The target left scroll pixel value. If null, don't scroll.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.ScrollContainer.Top">
            <summary>
            The target top scroll pixel value.
            If null, don't scroll.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.ScrollContainer.Left">
            <summary>
            The target left scroll pixel value.
            If null, don't scroll.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.ScrollContainer.ToStringAdjective">
            <summary>
            ToString adjective.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollContainer.To(Boa.Constrictor.WebDriver.IWebLocator,System.Int32,System.Int32)">
            <summary>
            Constructs the task object to scroll top and left.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="top">The target top scroll pixel value.</param>
            <param name="left">The target left scroll pixel value.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollContainer.ToTop(Boa.Constrictor.WebDriver.IWebLocator,System.Int32)">
            <summary>
            Constructs the task object to scroll top only.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="top">The target top scroll pixel value.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollContainer.ToLeft(Boa.Constrictor.WebDriver.IWebLocator,System.Int32)">
            <summary>
            Constructs the task object to scroll left only.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="left">The target left scroll pixel value.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollContainer.Reset(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the task object to scroll to the origin.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollContainer.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Scrolls directly to an element using JavaScript.
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollContainer.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollContainer.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollContainer.ToString">
            <summary>
            Returns a description of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.ScrollToElement">
            <summary>
            Scrolls directly to an element using JavaScript.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollToElement.#ctor(Boa.Constrictor.WebDriver.IWebLocator,System.Boolean)">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="alignToTop">Aligns scrolling to the top of the target element if true.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.ScrollToElement.AlignToTop">
            <summary>
            Aligns scrolling to the top of the target element if true.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.ScrollToElement.ScrollCommand">
            <summary>
            The JavaScript scroll command.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.ScrollToElement.ToStringAdjective">
            <summary>
            ToString adjective.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollToElement.At(Boa.Constrictor.WebDriver.IWebLocator,System.Boolean)">
            <summary>
            Constructs the task object.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="alignToTop">Aligns scrolling to the top of the target element if true.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollToElement.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Scrolls directly to an element using JavaScript.
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollToElement.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollToElement.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.ScrollToElement.ToString">
            <summary>
            Returns a description of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.Select">
            <summary>
            Selects an option by value, text, or index in a select element.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Select.#ctor(Boa.Constrictor.WebDriver.IWebLocator,System.Nullable{System.Int32},System.Boolean,System.String,System.String)">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="index">The index of the option to select. Use if not null.</param>
            <param name="partialMatch">If true, do partial match on option text. Only applicable for selection by text.</param>
            <param name="text">The text of the option to select. Use if not null.</param>
            <param name="value">The text of the option to select. Use if not null.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.Select.Index">
            <summary>
            The index of the option to select.
            Use if not null.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.Select.PartialMatch">
            <summary>
            If true, do partial match on option text.
            Only applicable for selection by text.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.Select.Text">
            <summary>
            The text of the option to select.
            Use if not null.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.Select.Value">
            <summary>
            The value of the option to select.
            Use if not null.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Select.ByIndex(Boa.Constrictor.WebDriver.IWebLocator,System.Int32)">
            <summary>
            Constructs the task object to select by index.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="index">The index of the option to select.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Select.ByText(Boa.Constrictor.WebDriver.IWebLocator,System.String,System.Boolean)">
            <summary>
            Constructs the task object to select by text.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="text">The text of the option to select.</param>
            <param name="partialMatch">If true, do partial match on option text.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Select.ByValue(Boa.Constrictor.WebDriver.IWebLocator,System.String)">
            <summary>
            Constructs the task object to select by value.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="value">The value of the option to select.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Select.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Selects an option by text in a select element.
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Select.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Select.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.SendKeys">
            <summary>
            Sends keystrokes to a Web element.
            By default, the element is cleared before keys are sent using backspaces.
            Sometimes, the "Clear" method doesn't work.
            Ctrl-A + Backspace doesn't always work, either.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SendKeys.#ctor(Boa.Constrictor.WebDriver.IWebLocator,System.String)">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="keystrokes">The keystrokes (e.g., text) to send.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.SendKeys.Clear">
            <summary>
            If true, clear the element first.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.SendKeys.FinalElement">
            <summary>
            The locator for the element to click after sending the keys.
            Clicking another element can "commit" an input element's text.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.SendKeys.FinalEnter">
            <summary>
            If true, hit the ENTER key after sending the keys.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.SendKeys.Keystrokes">
            <summary>
            The keystrokes (e.g., text) to send.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.SendKeys.Private">
            <summary>
            If true, don't log the keystrokes.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.SendKeys.UseClearMethod">
            <summary>
            If true, use the "Clear" method instead of backspaces to clear the element.
            This will happen only if the "Clear" property is true.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SendKeys.To(Boa.Constrictor.WebDriver.IWebLocator,System.String)">
            <summary>
            Constructs the task object.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <param name="keystrokes">The keystrokes (e.g., text) to send.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SendKeys.Privately">
            <summary>
            Prevents keystrokes from being logged.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SendKeys.ThenClick(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            After sending keys to the target element, click a final element.
            Clicking another element can "commit" an input element's text.
            This will happen after hitting the ENTER key on the target element (if applicable).
            </summary>
            <param name="finalElement"></param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SendKeys.ThenHitEnter">
            <summary>
            After sending keys to the target element, hit the ENTER key.
            This will happen before clicking the final element (if applicable).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SendKeys.UsingClearMethod">
            <summary>
            Use the "Clear" method instead of backspaces to clear the element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SendKeys.WithoutClearing">
            <summary>
            Clearing the element before entering keystrokes is the default behavior.
            Call this method if clearing should not be done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SendKeys.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Sends keystrokes to the target Web element.
            By default, the element will be cleared first, and keystrokes will not be kept private for logging.
            Use builder methods to change those defaults.
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SendKeys.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SendKeys.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SendKeys.ToString">
            <summary>
            Returns a description of the question.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.Submit">
            <summary>
            Submits a form.
            Submit may be called on any element in the form.
            This may be more convenient than explicitly searching for the form's submit input.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Submit.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
            <param name="locator">The target Web element's locator.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Submit.On(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the task object.
            </summary>
            <param name="locator">The target Web element's locator.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.Submit.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Submits a form.
            Submit may be called on any element in the form.
            This may be more convenient than explicitly searching for the form's submit input.
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.SwitchWindow">
            <summary>
            Switches the browser window in focus.
            Selenium WebDriver treats tabs like windows, too.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SwitchWindow.#ctor(System.String)">
            <summary>
            Private constructor.
            (Use static builder methods to construct.)
            </summary>
            <param name="handle">The window handle.</param>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.SwitchWindow.Handle">
            <summary>
            The window handle.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SwitchWindow.To(System.String)">
            <summary>
            Constructs the task object for the given window handle.
            </summary>
            <param name="handle">The window handle.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SwitchWindow.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Navigates the browser to the target URL.
            </summary>
            <param name="actor">The screenplay actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SwitchWindow.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SwitchWindow.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SwitchWindow.ToString">
            <summary>
            Returns a description of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.SwitchWindowToLatest">
            <summary>
            Safely switches to the newest tab in the browser.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SwitchWindowToLatest.#ctor">
            <summary>
            Private Constructor.
            (Use the public builder methods.)
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SwitchWindowToLatest.InBrowser">
            <summary>
            Task builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SwitchWindowToLatest.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the latest window handle and switches to it.
            </summary>
            <param name="actor">The Screenplay actor.</param>
            <param name="driver">The WebDriver from the BrowseTheWeb ability.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.SwitchWindowToLatest.ToString">
            <summary>
            Returns a description of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Boa.Constrictor.WebDriver.WaitAndRefresh">
            <summary>
            Waits for an element to appear and refreshes the browser if it doesn't appear within the refresh timeout.
            Internally calls Wait.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WaitAndRefresh.#ctor(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Private constructor.
            (Use static methods for public construction.)
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.WaitAndRefresh.RefreshSeconds">
            <summary>
            The number of seconds to sleep after refreshing the browser.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.WaitAndRefresh.TimeoutSeconds">
            <summary>
            The timeout override in seconds.
            If null, use the standard timeout value.
            This value is passed directly into Wait.
            </summary>
        </member>
        <member name="P:Boa.Constrictor.WebDriver.WaitAndRefresh.AdditionalSeconds">
            <summary>
            An additional amount to add to the timeout.
            </summary>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WaitAndRefresh.For(Boa.Constrictor.WebDriver.IWebLocator)">
            <summary>
            Constructs the task.
            </summary>
            <param name="locator">The locator for whose appearance to wait.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WaitAndRefresh.ForUpTo(System.Int32)">
            <summary>
            Sets an override value for timeout seconds.
            This value is passed directly into Wait.
            </summary>
            <param name="seconds">The new timeout in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WaitAndRefresh.ForAnAdditional(System.Int32)">
            <summary>
            Adds an additional amount to the timeout.
            </summary>
            <param name="seconds">The seconds to add to the timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WaitAndRefresh.RefreshWaiting(System.Int32)">
            <summary>
            Sets an override value for time to wait after refreshing the browser.
            </summary>
            <param name="seconds">Wait time in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WaitAndRefresh.PerformAs(Boa.Constrictor.Screenplay.IActor,OpenQA.Selenium.IWebDriver)">
            <summary>
            Waits for an element to appear and refreshes the browser if it doesn't appear within the refresh timeout.
            Internally calls Wait.
            </summary>
            <param name="actor">The actor.</param>
            <param name="driver">The WebDriver.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WaitAndRefresh.Equals(System.Object)">
            <summary>
            Checks if this interaction is equal to another interaction.
            </summary>
            <param name="obj">The other object.</param>
        </member>
        <member name="M:Boa.Constrictor.WebDriver.WaitAndRefresh.GetHashCode">
            <summary>
            Gets a unique hash code for this interaction.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
